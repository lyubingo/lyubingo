<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lyubingo blog</title>
  
  <subtitle>LYUBINGO BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lyubingo.github.io/"/>
  <updated>2019-03-20T07:34:07.099Z</updated>
  <id>https://lyubingo.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>15yum安装php72</title>
    <link href="https://lyubingo.github.io/2019/03/20/15yum%E5%AE%89%E8%A3%85php72/"/>
    <id>https://lyubingo.github.io/2019/03/20/15yum安装php72/</id>
    <published>2019-03-20T07:22:42.000Z</published>
    <updated>2019-03-20T07:34:07.099Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CenOS7-4安装PHP7-2"><a href="#CenOS7-4安装PHP7-2" class="headerlink" title="CenOS7.4安装PHP7.2"></a>CenOS7.4安装PHP7.2</h3><p>参考链接：</p><h2 id="安装PHP7-2"><a href="#安装PHP7-2" class="headerlink" title="安装PHP7.2"></a>安装PHP7.2</h2><blockquote><p>sudo yum install epel-release</p></blockquote><p>安装remi源</p><blockquote><p>sudo yum install <a href="http://rpms.remirepo.net/enterprise/remi-release-7.rpm" target="_blank" rel="noopener">http://rpms.remirepo.net/enterprise/remi-release-7.rpm</a></p></blockquote><p>安装 yum 扩展包</p><blockquote><p>sudo yum install yum-utils</p></blockquote><p>启用remi仓库</p><blockquote><p>sudo yum-config-manager –enable remi-php72<br>sudo yum update</p></blockquote><p>安装开始</p><blockquote><p>sodu yum install php72</p></blockquote><p>安装 php-fpm 和一些其他模块</p><blockquote><p>sudo yum install php72-php-fpm php72-php-gd php72-php-json php72-php-mbstring php72-php-mysqlnd php72-php-xml php72-php-xmlrpc php72-php-opcache</p></blockquote><p>输入 php72 -v 查看安装结果</p><h2 id="php-fpm-服务"><a href="#php-fpm-服务" class="headerlink" title="php-fpm 服务"></a>php-fpm 服务</h2><p>设置开机自启</p><blockquote><p>sudo systemctl enable php72-php-fpm.service</p></blockquote><p>常用 php-fpm 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开启服务</span><br><span class="line">$ sudo systemctl start php72-php-fpm.service</span><br><span class="line"># 停止服务</span><br><span class="line">$ sudo systemctl stop php72-php-fpm.service</span><br><span class="line"># 查看状态</span><br><span class="line">$ sudo systemctl status php72-php-fpm.service</span><br></pre></td></tr></table></figure><p>通过 egrep 查询 nginx 服务器的用户和用户组：</p><blockquote><p>egrep ‘^(user|group)’ /etc/nginx/nginx.conf</p></blockquote><p>结果示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user nginx;</span><br></pre></td></tr></table></figure><p>编辑 /etc/opt/remi/php72/php-fpm.d/<a href="http://www.conf,修改执行" target="_blank" rel="noopener">www.conf,修改执行</a> php-fpm 的权限：</p><blockquote><p>sudo vi /etc/opt/remi/php72/php-fpm.d/<a href="http://www.conf" target="_blank" rel="noopener">www.conf</a></p></blockquote><p>设置用户和用户组为 nginx :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = nginx </span><br><span class="line">group = nginx</span><br></pre></td></tr></table></figure><p>保存并关闭文件， 重启php-fpm 服务：</p><blockquote><p>sudo systemctl restart php72-php-fpm.service</p></blockquote><h2 id="路径整理"><a href="#路径整理" class="headerlink" title="路径整理"></a>路径整理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># php 安装路径</span><br><span class="line">/etc/opt/remi/php72</span><br><span class="line"></span><br><span class="line"># nginx 配置文件</span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"># nginx 默认项目路径</span><br><span class="line">/usr/share/nginx/html</span><br></pre></td></tr></table></figure><h3 id="编者按"><a href="#编者按" class="headerlink" title="编者按"></a>编者按</h3><p>nginx路径视自身情况而定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CenOS7-4安装PHP7-2&quot;&gt;&lt;a href=&quot;#CenOS7-4安装PHP7-2&quot; class=&quot;headerlink&quot; title=&quot;CenOS7.4安装PHP7.2&quot;&gt;&lt;/a&gt;CenOS7.4安装PHP7.2&lt;/h3&gt;&lt;p&gt;参考链接：&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="搭建环境" scheme="https://lyubingo.github.io/tags/%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>14源码安装Mysql5.7</title>
    <link href="https://lyubingo.github.io/2019/03/20/14%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85MySQL5.7/"/>
    <id>https://lyubingo.github.io/2019/03/20/14源码安装MySQL5.7/</id>
    <published>2019-03-20T02:57:38.000Z</published>
    <updated>2019-03-20T07:20:30.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mysql5-7"><a href="#Mysql5-7" class="headerlink" title="Mysql5.7"></a>Mysql5.7</h3><p>参考链接：</p><p><a href="https://segmentfault.com/a/1190000016945337" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016945337</a></p><p><a href="https://www.jellythink.com/archives/14" target="_blank" rel="noopener">https://www.jellythink.com/archives/14</a></p><p>我就不像上一篇那样照着抄了，用我自己的语言整理下吧。</p><p>我主要是参考的第二篇，两篇blog都有借鉴，下面安装过程。</p><p>总的来说，这种方法是自行从官方网站下载安装包进行的安装，所以我们要先从官方下载压缩包。</p><h2 id="手动下载MySQL安装包"><a href="#手动下载MySQL安装包" class="headerlink" title="手动下载MySQL安装包"></a>手动下载MySQL安装包</h2><p>进入 <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a> 选择download后，会发现有很多的版本</p><p>1.通过观察参考链接2的图片，我们选择5.7版本，系统类型选Linux-Generic 下载最下面的那个包。</p><h2 id="卸载原来存在的mysql或者mariadb"><a href="#卸载原来存在的mysql或者mariadb" class="headerlink" title="卸载原来存在的mysql或者mariadb"></a>卸载原来存在的mysql或者mariadb</h2><p>检查是否安装过MySQL：</p><blockquote><p>rpm -qa | grep mysql<br>rpm -qa | grep mariadb</p></blockquote><p>2.存在mariadb，然后我用这个命令进行的删除</p><blockquote><p>rpm -e –nodeps 文件名</p></blockquote><h2 id="建立mysql用户"><a href="#建立mysql用户" class="headerlink" title="建立mysql用户"></a>建立mysql用户</h2><p>参考链接2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加mysql用户组</span><br><span class="line">groupadd mysql</span><br><span class="line"></span><br><span class="line"># 添加mysql用户</span><br><span class="line">useradd -g mysql mysql -d /home/mysql</span><br><span class="line"></span><br><span class="line"># 修改mysql用户的登陆密码</span><br><span class="line">passwd mysql</span><br></pre></td></tr></table></figure><p>or</p><p>参考链接2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql -s /bin/false mysql</span><br></pre></td></tr></table></figure><p>我使用的后者， 猜测意思是：禁止mysql用户登陆</p><p>但是却根据参考链接2进行了如下文件夹创建，之后的配置也大部分采用参考链接2，创建文件， 并且记得给到权限给mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/home/mysql/3306/data</span><br><span class="line">/home/mysql/3306/log</span><br><span class="line">/home/mysql/3306/tmp</span><br></pre></td></tr></table></figure><h2 id="以防万一，-直接安装libao1"><a href="#以防万一，-直接安装libao1" class="headerlink" title="以防万一， 直接安装libao1"></a>以防万一， 直接安装libao1</h2><blockquote><p>yum install libaio-devel.x86_64</p></blockquote><p>3.然后，将下载的mysql-5.7.21-linux-glibc2.12-x86_64.tar安装包上传至服务器/usr/local目录下；</p><p>此时这里的文件名，是自己的下载的那过文件名，我虽然照抄了，但是我的文件版本是5.7.25的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 解压缩</span><br><span class="line">tar -xvf mysql-5.7.21-linux-glibc2.12-x86_64.tar</span><br><span class="line"></span><br><span class="line"># 会得到一个mysql-5.7.21-linux-glibc2.12-x86_64.tar.gz文件，再解压缩</span><br><span class="line">tar -zxvf mysql-5.7.21-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"># 建立软链接，便于以后版本升级</span><br><span class="line">ln -s mysql-5.7.21-linux-glibc2.12-x86_64 mysql</span><br><span class="line"></span><br><span class="line"># 修改mysql文件夹下所有文件的用户和用户组</span><br><span class="line">chown -R mysql:mysql mysql/</span><br></pre></td></tr></table></figure><p>4.配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建配置文件</span><br><span class="line">cd /etc</span><br><span class="line"></span><br><span class="line"># 在my.cnf文件中添加对应的配置项，文章末尾会提供一个默认的my.cnf配置</span><br><span class="line">vi my.cnf</span><br></pre></td></tr></table></figure><ol start="5"><li>安装数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 初始化数据库，并指定启动mysql的用户</span><br><span class="line">./mysqld --initialize --user=mysql</span><br></pre></td></tr></table></figure><p>安装完成后，在my.cnf中配置的datadir目录下生成一个error.log文件，里面记录了root用户的随机密码。msyqld好像在mysql文件夹里</p><p>6.设置开机自启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 复制启动脚本到资源目录</span><br><span class="line">cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld</span><br><span class="line"></span><br><span class="line"># 增加mysqld服务控制脚本执行权限</span><br><span class="line">chmod +x /etc/rc.d/init.d/mysqld</span><br><span class="line"></span><br><span class="line"># 将mysqld服务加入到系统服务</span><br><span class="line">chkconfig --add mysqld</span><br><span class="line"></span><br><span class="line"># 检查mysqld服务是否已经生效</span><br><span class="line">chkconfig --list mysqld</span><br><span class="line"></span><br><span class="line"># 切换至mysql用户，启动mysql</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>这上面可能有坑，就是会提示文件找不到，自己找一下，在mysql文件(bin等)下，或者/etc下， 可以找到的</p><p>7.配置环境变量为了更好的操作mysql，配置环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 切换至mysql用户</span><br><span class="line">su - mysql</span><br><span class="line"></span><br><span class="line"># 修改配置文件，增加export PATH=$PATH:/usr/local/mysql/bin</span><br><span class="line">vi .bash_profile</span><br><span class="line"></span><br><span class="line"># 立即生效</span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><p>由于我禁止mysql用户登陆，所以以上对我来说没用，采用以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/profile.d</span><br><span class="line">touch mysql.sh</span><br><span class="line">vi mysql.sh</span><br><span class="line">#mysql.sh添加如下内容</span><br><span class="line">MYSQL_HOME=/usr/local/mysql</span><br><span class="line">PATH=$PATH:$MYSQL_HOME/bin</span><br><span class="line">export MYSQL_HOME PATH</span><br></pre></td></tr></table></figure><blockquote><p>source /etc/profile</p></blockquote><p>然后启动数据库 </p><blockquote><p>service mysqld start</p></blockquote><p>找到log下error.log里的临时密码，然后登陆mysql</p><p>然后修改密码</p><blockquote><p>set password for root@localhost=password(“123456”);</p></blockquote><p>开启远程登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># grant all privileges on 库.表 to 用户@&apos;%&apos; identified by &apos;用户密码&apos;;</span><br><span class="line">mysql&gt; grant all privileges on *.* to root@&apos;%&apos; identified by &apos;root密码&apos;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>设置防火墙（我没有设置）；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 设置防火墙：</span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"># 重新载入：</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"># 查看：</span><br><span class="line">firewall-cmd --zone= public --query-port=3306/tcp 或 firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>同时参考两篇， 取长补短， 成文如上，如果有问题， 注意看两篇原文</p><p>另：参考链接2说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在安装过程中出现./mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory错误时，请切回root用户，执行以下命令即可：</span><br><span class="line"></span><br><span class="line">yum install libaio</span><br></pre></td></tr></table></figure><p>另： 参考链接2 my.cnf 配置（即我正在使用的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[client]                                        # 客户端设置，即客户端默认的连接参数</span><br><span class="line">port = 3306                                    # 默认连接端口</span><br><span class="line">socket = /home/mysql/3306/tmp/mysql.sock                        # 用于本地连接的socket套接字，mysqld守护进程生成了这个文件</span><br><span class="line"></span><br><span class="line">[mysqld]                                        # 服务端基本设置</span><br><span class="line"># 基础设置</span><br><span class="line">server-id = 1                                  # Mysql服务的唯一编号 每个mysql服务Id需唯一</span><br><span class="line">port = 3306                                    # MySQL监听端口</span><br><span class="line">basedir = /usr/local/mysql                      # MySQL安装根目录</span><br><span class="line">datadir = /home/mysql/3306/data                      # MySQL数据文件所在位置</span><br><span class="line">tmpdir  = /home/mysql/3306/tmp                                  # 临时目录，比如load data infile会用到</span><br><span class="line">socket = /home/mysql/3306/tmp/mysql.sock        # 为MySQL客户端程序和服务器之间的本地通讯指定一个套接字文件</span><br><span class="line">pid-file = /home/mysql/3306/log/mysql.pid      # pid文件所在目录</span><br><span class="line">skip_name_resolve = 1                          # 只能用IP地址检查客户端的登录，不用主机名</span><br><span class="line">character-set-server = utf8mb4                  # 数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）</span><br><span class="line">transaction_isolation = READ-COMMITTED          # 事务隔离级别，默认为可重复读，MySQL默认可重复读级别</span><br><span class="line">collation-server = utf8mb4_general_ci          # 数据库字符集对应一些排序等规则，注意要和character-set-server对应</span><br><span class="line">init_connect=&apos;SET NAMES utf8mb4&apos;                # 设置client连接mysql时的字符集,防止乱码</span><br><span class="line">lower_case_table_names = 1                      # 是否对sql语句大小写敏感，1表示不敏感</span><br><span class="line">max_connections = 400                          # 最大连接数</span><br><span class="line">max_connect_errors = 1000                      # 最大错误连接数</span><br><span class="line">explicit_defaults_for_timestamp = true          # TIMESTAMP如果没有显示声明NOT NULL，允许NULL值</span><br><span class="line">max_allowed_packet = 128M                      # SQL数据包发送的大小，如果有BLOB对象建议修改成1G</span><br><span class="line">interactive_timeout = 1800                      # MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span><br><span class="line">wait_timeout = 1800                            # MySQL默认的wait_timeout值为8个小时, interactive_timeout参数需要同时配置才能生效</span><br><span class="line">tmp_table_size = 16M                            # 内部内存临时表的最大值 ，设置成128M；比如大数据量的group by ,order by时可能用到临时表；超过了这个值将写入磁盘，系统IO压力增大</span><br><span class="line">max_heap_table_size = 128M                      # 定义了用户可以创建的内存表(memory table)的大小</span><br><span class="line">query_cache_size = 0                            # 禁用mysql的缓存查询结果集功能；后期根据业务情况测试决定是否开启；大部分情况下关闭下面两项</span><br><span class="line">query_cache_type = 0</span><br><span class="line"></span><br><span class="line"># 用户进程分配到的内存设置，每个session将会分配参数设置的内存大小</span><br><span class="line">read_buffer_size = 2M                          # MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。</span><br><span class="line">read_rnd_buffer_size = 8M                      # MySQL的随机读缓冲区大小</span><br><span class="line">sort_buffer_size = 8M                          # MySQL执行排序使用的缓冲大小</span><br><span class="line">binlog_cache_size = 1M                          # 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K</span><br><span class="line"></span><br><span class="line">back_log = 130                                  # 在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中；官方建议back_log = 50 + (max_connections / 5),封顶数为900</span><br><span class="line"></span><br><span class="line"># 日志设置</span><br><span class="line">log_error = /home/mysql/3306/log/error.log                          # 数据库错误日志文件</span><br><span class="line">slow_query_log = 1                              # 慢查询sql日志设置</span><br><span class="line">long_query_time = 1                            # 慢查询时间；超过1秒则为慢查询</span><br><span class="line">slow_query_log_file = /home/mysql/3306/log/slow.log                  # 慢查询日志文件</span><br><span class="line">log_queries_not_using_indexes = 1              # 检查未使用到索引的sql</span><br><span class="line">log_throttle_queries_not_using_indexes = 5      # 用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数。该值默认为0，表示没有限制</span><br><span class="line">min_examined_row_limit = 100                    # 检索的行数必须达到此值才可被记为慢查询，查询检查返回少于该参数指定行的SQL不被记录到慢查询日志</span><br><span class="line">expire_logs_days = 5                            # MySQL binlog日志文件保存的过期时间，过期后自动删除</span><br><span class="line"></span><br><span class="line"># 主从复制设置</span><br><span class="line">log-bin = mysql-bin                            # 开启mysql binlog功能</span><br><span class="line">binlog_format = ROW                            # binlog记录内容的方式，记录被操作的每一行</span><br><span class="line">binlog_row_image = minimal                      # 对于binlog_format = ROW模式时，减少记录日志的内容，只记录受影响的列</span><br><span class="line"></span><br><span class="line"># Innodb设置</span><br><span class="line">innodb_open_files = 500                        # 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</span><br><span class="line">innodb_buffer_pool_size = 64M                  # InnoDB使用一个缓冲池来保存索引和原始数据，一般设置物理存储的60% ~ 70%；这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少</span><br><span class="line">innodb_log_buffer_size = 2M                    # 此参数确定写日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</span><br><span class="line">innodb_flush_method = O_DIRECT                  # O_DIRECT减少操作系统级别VFS的缓存和Innodb本身的buffer缓存之间的冲突</span><br><span class="line">innodb_write_io_threads = 4                    # CPU多核处理能力设置，根据读，写比例进行调整</span><br><span class="line">innodb_read_io_threads = 4</span><br><span class="line">innodb_lock_wait_timeout = 120                  # InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒</span><br><span class="line">innodb_log_file_size = 32M                      # 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mysql5-7&quot;&gt;&lt;a href=&quot;#Mysql5-7&quot; class=&quot;headerlink&quot; title=&quot;Mysql5.7&quot;&gt;&lt;/a&gt;Mysql5.7&lt;/h3&gt;&lt;p&gt;参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com
      
    
    </summary>
    
    
      <category term="搭建环境" scheme="https://lyubingo.github.io/tags/%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7.4(2019年)安装nginx</title>
    <link href="https://lyubingo.github.io/2019/03/20/13CentOs7.4%EF%BC%882019%E5%B9%B4%EF%BC%89%E5%AE%89%E8%A3%85nginx/"/>
    <id>https://lyubingo.github.io/2019/03/20/13CentOs7.4（2019年）安装nginx/</id>
    <published>2019-03-20T02:21:01.000Z</published>
    <updated>2019-03-20T02:59:29.444Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>参考链接：<br><a href="https://segmentfault.com/a/1190000018109309" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018109309</a></p><p>Nginx 读作 engine x， 是一个免费的、开源的、高性能的 HTTP 和反向代理服务，主要负责负载一些访问量比较大的站点。</p><p>Nginx 可以作为一个独立的 Web 服务，也可以用来给 Apache 或是其他的 Web 服务做反向代理。</p><p>相比于 Apache，Nginx 可以处理更多的并发连接，而且每个连接的内存占用的非常小。</p><p>本教程将会教您如何在 Centos 7 的服务器上安装和管理 Nginx。</p><h2 id="开始前的准备"><a href="#开始前的准备" class="headerlink" title="开始前的准备"></a>开始前的准备</h2><p>在开始阅读此教程之前，请确保你是以拥有 sudo 权限的用户来登录的服务器，并且服务器中没有 Apache 或是其他服务正在使用 80（HTTP） 和 443（HTTPS） 端口上，防止端口被占用，造成 Nginx 无法正常启动。</p><h2 id="在CentOS中安装Nginx"><a href="#在CentOS中安装Nginx" class="headerlink" title="在CentOS中安装Nginx"></a>在CentOS中安装Nginx</h2><p>请按照下面的步骤，在 CentOS 中安装 Nginx。</p><p>1、 EPEL 仓库中有 Nginx 的安装包。如果你还没有安装过 EPEL，可以通过运行下面的命令来完成安装：</p><blockquote><p>sudo yum install epel-release</p></blockquote><p>上面代码的意思是以 sudo 权限运行安装 epel-release，如果你当前登录的用户不是 root，则会提示你输入密码来运行，输入密码时是看不到输入的内容的，所以不用担心，继续输入就行。然后回车继续运行，后面的命令中如果包含 sudo 则都表明是刚提到的意思，不再重复解释。</p><p>2、 输入以下命令来安装 Nginx：</p><blockquote><p>sudo yum install nginx</p></blockquote><p>如果这是您第一次从 EPEL 仓库中安装软件，yum 可能会提示您导入 EPEL GPG key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">Importing GPG key 0x352C64E5:</span><br><span class="line">Userid     : &quot;Fedora EPEL (7) &lt;epel@fedoraproject.org&gt;&quot;</span><br><span class="line">Fingerprint: 91e9 7d7c 4a5e 96f1 7f3e 888f 6a2f aea2 352c 64e5</span><br><span class="line">Package    : epel-release-7-9.noarch (@extras)</span><br><span class="line">From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">Is this ok [y/N]:</span><br></pre></td></tr></table></figure><p>类似于上面的内容，遇到这种情况，输入 y，然后 Enter（回车） 即可继续安装。</p><p>3、 等到安装完成以后，可以通过以下命令来设置开机启动和运行 Nginx 服务：</p><p>设置 Nginx 开机启动：</p><blockquote><p>sudo systemctl enable nginx</p></blockquote><p>运行以上命令以后，会输出类似以下的内容，表示创建了一个软连接来关联 Nginx，不用担心，并不是报错了，下一步就可以启动 Nginx 了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br></pre></td></tr></table></figure><p>启动 Nginx：</p><blockquote><p>sudo systemctl start nginx </p></blockquote><p>通过运行以下命令，来检查 Nginx 的运行状态：</p><blockquote><p>sudo systemctl status nginx</p></blockquote><p>然后会输出类似下面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">● nginx.service - The nginx HTTP and reverse proxy server</span><br><span class="line">  Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; vendor preset: disabled)</span><br><span class="line">  Active: active (running) since Mon 2018-03-12 16:12:48 UTC; 2s ago</span><br><span class="line">  Process: 1677 ExecStart=/usr/sbin/nginx (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 1675 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 1673 ExecStartPre=/usr/bin/rm -f /run/nginx.pid (code=exited, status=0/SUCCESS)</span><br><span class="line">Main PID: 1680 (nginx)</span><br><span class="line">  CGroup: /system.slice/nginx.service</span><br><span class="line">          ├─1680 nginx: master process /usr/sbin/nginx</span><br><span class="line">          └─1681 nginx: worker process</span><br></pre></td></tr></table></figure><p>4、 如果你的服务器开启了防火墙，则需要同时打开 80（HTTP）和 443（HTTPS）端口</p><p>通过下面的命令来打开这两个端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>国内的服务器厂商，安全组也可能会默认屏蔽这两个端口，比如 阿里云 和 腾讯云，如果在 第 5 步 时发现无法访问，可以自行百度一下如何放开这两个端口。</p><p>5、 验证 Nginx 是否成功启动，可以在浏览器中打开 <a href="http://YOUR_IP，您将看到默认的" target="_blank" rel="noopener">http://YOUR_IP，您将看到默认的</a> Nginx 欢迎页面，类似于下图所示：</p><p>(welcome to nginx.jpg)</p><p>注：Nginx 的默认欢迎页有好几种样式，和你安装的版本有关，所以大家只用关注这个页面的大标题就行了 Welcome to nginx！</p><h2 id="通过-systemctl-管理-Nginx"><a href="#通过-systemctl-管理-Nginx" class="headerlink" title="通过 systemctl 管理 Nginx"></a>通过 systemctl 管理 Nginx</h2><p>你可以像管理其他服务那样管理 Nginx。</p><blockquote><p>sudo systemctl start nginx<br>sudo systemctl stop nginx<br>sudo systemctl restart nginx </p></blockquote><p>修改nginx配置后， 重新加载</p><blockquote><p>sudo systemctl reload nginx</p></blockquote><p>设置开机启动</p><blockquote><p>sudo systemctl enable nginx</p></blockquote><p>关闭开机启动</p><blockquote><p>sudo systemctl disable nginx</p></blockquote><h2 id="Nginx-的配置文件和最佳实践"><a href="#Nginx-的配置文件和最佳实践" class="headerlink" title="Nginx 的配置文件和最佳实践"></a>Nginx 的配置文件和最佳实践</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">通过以上方式安装的 Nginx，所有相关的配置文件都在 /etc/nginx/ 目录中。</span><br><span class="line">Nginx 的主配置文件是 /etc/nginx/nginx.conf。</span><br><span class="line">为了使 Nginx 配置更易于维护，建议为每个服务（域名）创建一个单独的配置文件。</span><br><span class="line">每一个独立的 Nginx 服务配置文件都必须以 .conf 结尾，并存储在 /etc/nginx/conf.d 目录中。您可以根据需求，创建任意多个独立的配置文件。</span><br><span class="line">独立的配置文件，建议遵循以下命名约定，比如你的域名是 kaifazhinan.com，那么你的配置文件的应该是这样的 /etc/nginx/conf.d/kaifazhinan.com.conf，如果你在一个服务器中部署多个服务，当然你也可以在文件名中加上 Nginx 转发的端口号，比如 kaifazhinan.com.3000.conf，这样做看起来会更加友好。</span><br><span class="line">如果你的配置中有很多重复的代码，那么建议你创建一个 /etc/nginx/snippets 文件夹，在这里面存放所有会被复用的代码块，然后在各个需要用到的 Nginx 的配置文件中引用进去，这样可以更方便管理和修改。</span><br><span class="line">Nginx 日志文件（access.log 和 error.log ）位于 /var/log/nginx/ 目录中。建议为每个独立的服务配置不同的访问权限和错误日志文件，这样查找错误时，会更加方便快捷。</span><br><span class="line">你可以将要部署的代码文件，存储在任何你想的位置，但是一般推荐存放在下列位置中的其中一个：</span><br><span class="line"></span><br><span class="line">/home/&lt;user_name&gt;/&lt;site_name&gt;</span><br><span class="line">/var/www/&lt;site_name&gt;</span><br><span class="line">/var/www/html/&lt;site_name&gt;</span><br><span class="line">/opt/&lt;site_name&gt;</span><br><span class="line">/usr/share/nginx/html</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先恭喜你，你已经成功的在 CentOS 7 上安装了 Nginx 服务，你现在可以在你的服务器中通过 Nginx 部署你的服务代码啦，如果你打算在服务器中部署多个服务，你可能需要阅读这篇文章 <a href="https://linuxize.com/post/how-to-set-up-nginx-server-blocks-on-centos-7/" target="_blank" rel="noopener">How To Set Up Nginx Server Blocks on CentOS 7</a>（待翻译）。</p><p>哦，对了，安全证书（HTTPS）是当今所有网站的“必备”功能。所以你可以阅读这篇文章 <a href="https://linuxize.com/post/secure-nginx-with-let-s-encrypt-on-centos-7/" target="_blank" rel="noopener">Secure Nginx with Let’s Encrypt on CentOS 7</a>（待翻译） 来学习如何通过 Let’s Encrypt SSL 生成免费的安全证书。</p><p>期待下次与你相见 : )</p><h2 id="编者按"><a href="#编者按" class="headerlink" title="编者按"></a>编者按</h2><p>之前呢， 我都是用源码安装还是咋滴，总之要make和make install， 但是这个不需要诶， 所以感觉新奇， 以及好用。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;nginx&quot;&gt;&lt;a href=&quot;#nginx&quot; class=&quot;headerlink&quot; title=&quot;nginx&quot;&gt;&lt;/a&gt;nginx&lt;/h3&gt;&lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000018109
      
    
    </summary>
    
    
      <category term="搭建环境" scheme="https://lyubingo.github.io/tags/%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>在阿里云搭建了一个svn</title>
    <link href="https://lyubingo.github.io/2018/09/01/12%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BA%E4%BA%86%E4%B8%80%E4%B8%AAsvn/"/>
    <id>https://lyubingo.github.io/2018/09/01/12在阿里云搭建了一个svn/</id>
    <published>2018-09-01T04:03:13.000Z</published>
    <updated>2018-09-01T04:04:32.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搭建svn"><a href="#搭建svn" class="headerlink" title="搭建svn"></a>搭建svn</h3><p>参考链接：<br><a href="https://help.aliyun.com/document_detail/52864.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/52864.html</a></p><p>没买服务，手动安装</p><blockquote><p>yum install subversion</p></blockquote><p>查看版本</p><blockquote><p>svnserve –version</p></blockquote><p>创建版本库：</p><blockquote><p>mkdir /var/svn<br>cd /var/svn<br>svnadmin create /var/svn/svnrepos</p></blockquote><p>然后 cd svnrepos ， 可以查看到这些：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Subversion目录说明：</span><br><span class="line"></span><br><span class="line">db目录：所有版本控制的数据存放文件。</span><br><span class="line">hooks目录：放置hook脚本文件的目录。</span><br><span class="line">locks目录：用来追踪存取文件库的客户端。</span><br><span class="line">format文件：是一个文本文件，里面只放了一个整数，表示当前文件库配置的版本号。</span><br><span class="line">conf目录：是这个仓库的配置文件（仓库的用户访问账号、权限等）。</span><br></pre></td></tr></table></figure></p><p>进入conf，返回如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">authz：是权限控制文件。</span><br><span class="line">passwd：是账号密码文件。</span><br><span class="line">svnserve.conf：SVN服务配置文件</span><br></pre></td></tr></table></figure></p><p>按以下步骤设置账号密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运行 vi passwd。</span><br><span class="line">按 i 键进入编辑模式。</span><br><span class="line">在 [users] 块中添加用户账号和密码，格式：账号=密码，比如示例中的suzhan = redhat（注意等号两端要有一个空格）。</span><br><span class="line">按 Esc 键退出编辑模式，并输入 :wq 保存并退出。</span><br></pre></td></tr></table></figure></p><p>按以下步骤设置权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">运行 vi authz。</span><br><span class="line">按 i 键进入编辑模式。</span><br><span class="line">在末尾添加如下代码（其中，r表示读，w表示写）：</span><br><span class="line">[/]</span><br><span class="line">suzhan=rw</span><br><span class="line">按 Esc 键退出编辑模式，并输入 :wq 保存并退出。</span><br></pre></td></tr></table></figure></p><p>按以下步骤修改svnserve.conf文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">运行命令 vi svnserve.conf。</span><br><span class="line">按 i 键进入编辑模式。</span><br><span class="line">打开以下几个注释（注意每行不能以空格开始，等号两端要有一个空格）：</span><br><span class="line">anon-access = read #匿名用户可读，您也可以设置 anon-access = none，不允许匿名用户访问。设置为 none，可以使日志日期正常显示</span><br><span class="line">auth-access = write #授权用户可写</span><br><span class="line">password-db = passwd #使用哪个文件作为账号文件</span><br><span class="line">authz-db = authz #使用哪个文件作为权限文件</span><br><span class="line">realm = /var/svn/svnrepos #认证空间名，版本库所在目录</span><br></pre></td></tr></table></figure></p><p>启动svn版本库</p><blockquote><p>svnserve -d -r /var/svn/svnrepos<br>如果 ps -ef | grep svn 可以看到进程则说明成功</p></blockquote><p>停止svn：</p><blockquote><p>killall svnserve</p></blockquote><p><strong>建议还是看原文，因为原文有图，图文并茂。</strong></p><p>在windows上checkout，使用配置好的账号密码即可，因为服务器已经配置了/var/svn/svnrepos 所以不需要填路径。</p><p>SVN默认3690端口，使用阿里云可能需要在后台配置安全组，授权对象填0.0.0.0</p><h3 id="svn忽略文件"><a href="#svn忽略文件" class="headerlink" title="svn忽略文件"></a>svn忽略文件</h3><p>参考这篇：<br><a href="https://blog.51cto.com/1929297/2050548" target="_blank" rel="noopener">https://blog.51cto.com/1929297/2050548</a></p><p>选择在svn的properties 里编辑， 选择others然后添加规则即可</p><p>实在不行，在svn commit时可以右键选择ignore</p><p>以上。</p><blockquote><p>TODO:svn的发布是怎么实现的？</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;搭建svn&quot;&gt;&lt;a href=&quot;#搭建svn&quot; class=&quot;headerlink&quot; title=&quot;搭建svn&quot;&gt;&lt;/a&gt;搭建svn&lt;/h3&gt;&lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>八月最后一周博客总结</title>
    <link href="https://lyubingo.github.io/2018/09/01/11%E5%85%AB%E6%9C%88%E6%9C%80%E5%90%8E%E4%B8%80%E5%91%A8%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93/"/>
    <id>https://lyubingo.github.io/2018/09/01/11八月最后一周博客总结/</id>
    <published>2018-09-01T03:37:37.000Z</published>
    <updated>2018-09-01T03:40:07.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="8月最后一周总结博客"><a href="#8月最后一周总结博客" class="headerlink" title="8月最后一周总结博客"></a>8月最后一周总结博客</h2><p>以后每周都写一个总结博客，日积月累，集腋成裘。</p><p>上周呢，干了一些活，总免不了要google，</p><h3 id="用SQL命令查看MySQL数据库的大小"><a href="#用SQL命令查看MySQL数据库的大小" class="headerlink" title="用SQL命令查看MySQL数据库的大小"></a>用SQL命令查看MySQL数据库的大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 进入information_schema;</span><br><span class="line">2. 查询所有数据大小</span><br><span class="line">   select concat(round(sum(data_length/1024/1024),2),&apos;MB&apos;) as data from tables;</span><br><span class="line">3. 查看指定数据库大小：</span><br><span class="line">比如查看home数据库大小：</span><br><span class="line">select concat(round(sum(dta_length/1024/1024),2)&apos;MB&apos;) as data from tables where table_schema=&apos;home&apos;;</span><br><span class="line">4.查看制定数据库的某个表的大小，比如查看数据库home中members表的大小：</span><br><span class="line">select concat(round(sum(data_length/1024/1024),2),&quot;MB&quot;) as data from tables where table_schema=&apos;home&apos; and table_name=&apos;members&apos;;</span><br></pre></td></tr></table></figure><h3 id="解决blur与click冲突"><a href="#解决blur与click冲突" class="headerlink" title="解决blur与click冲突"></a>解决blur与click冲突</h3><p>原因：JavaScript为单线程，同一事件只能处理一个事件，而blur优于click执行。blur与click冲突有两种解决方式，</p><blockquote><p>对blur事件进行延迟， 让click先执行<br>使用mousedown代替click</p></blockquote><h3 id="不要使用group-by-rand-查询随机数据"><a href="#不要使用group-by-rand-查询随机数据" class="headerlink" title="不要使用group by rand()查询随机数据"></a>不要使用group by rand()查询随机数据</h3><p>我直接写的group by rand(),可以实现，但是超级卡，因为这样写mysql每次都要重读表。</p><p>最后优化得：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM &apos;table&apos; as t1 JOIN (SELECT ROUND(RAND()*((SELECT MAX(id) FROM &apos;table&apos;)-(SELECT MIN(id) FROM &apos;table&apos;)) + SELECT MIN(id) FROM &apos;table&apos;)) AS id ) AS t2</span><br><span class="line">WHERE t1.id &gt;= t2.id</span><br><span class="line">ORDER BY t1.id LIMIT 1;</span><br></pre></td></tr></table></figure></p><p>意思大概就是取一个id大于某个id的值，如果取多个，就会连续，当然，也可以分多次取，每次取一个。<br>有其他条件在where里用and符连接即可</p><h3 id="linux查看文件大小"><a href="#linux查看文件大小" class="headerlink" title="linux查看文件大小"></a>linux查看文件大小</h3><p>查看目前所有文件系统的可用空间及其使用情形</p><blockquote><p>df -h</p></blockquote><p>查看文件或文件夹的磁盘使用空间</p><blockquote><p>du -h –max-depth=1 your_dest_dir</p></blockquote><h3 id="mysql导入大量数据"><a href="#mysql导入大量数据" class="headerlink" title="mysql导入大量数据"></a>mysql导入大量数据</h3><p>运维表示使用source命令内存太小不能成功，但是我用navicate在内存还要小一半的服务器上导入成功了</p><p>可能原理不同</p><p>大致思路是：先建立个新表，然后导入数据，然后代替</p><p>另：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT Old_Password(&apos;string&apos;);</span><br><span class="line">SELECT Password(&apos;string&apos;);</span><br></pre></td></tr></table></figure></p><p>就是加密后的mysql密码了，前者是MySQL323加密</p><h3 id="xml-lt-CDATA-gt"><a href="#xml-lt-CDATA-gt" class="headerlink" title="xml &lt;![CDATA[]]&gt;"></a>xml &lt;![CDATA[]]&gt;</h3><h3 id="window软连接"><a href="#window软连接" class="headerlink" title="window软连接"></a>window软连接</h3><p>mklink /J 绝对路径 绝对路径</p><p>OK，svn搭建参看下个博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;8月最后一周总结博客&quot;&gt;&lt;a href=&quot;#8月最后一周总结博客&quot; class=&quot;headerlink&quot; title=&quot;8月最后一周总结博客&quot;&gt;&lt;/a&gt;8月最后一周总结博客&lt;/h2&gt;&lt;p&gt;以后每周都写一个总结博客，日积月累，集腋成裘。&lt;/p&gt;
&lt;p&gt;上周呢，干了一
      
    
    </summary>
    
    
      <category term="仓库" scheme="https://lyubingo.github.io/tags/%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>再接再厉，记录一些同样重要篇幅不多的东西</title>
    <link href="https://lyubingo.github.io/2018/08/18/10%E5%86%8D%E6%8E%A5%E5%86%8D%E5%8E%89%EF%BC%8C%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E5%90%8C%E6%A0%B7%E9%87%8D%E8%A6%81%E7%AF%87%E5%B9%85%E4%B8%8D%E5%A4%9A%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>https://lyubingo.github.io/2018/08/18/10再接再厉，记录一些同样重要篇幅不多的东西/</id>
    <published>2018-08-18T03:59:32.000Z</published>
    <updated>2018-08-18T04:14:54.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将目录和子目录都设成该权限"><a href="#将目录和子目录都设成该权限" class="headerlink" title="将目录和子目录都设成该权限"></a>将目录和子目录都设成该权限</h3><blockquote><p>chmod -R 777 目录</p></blockquote><h3 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h3><blockquote><p>ln -s 源文件 目标文件</p></blockquote><h3 id="php强制显示错误"><a href="#php强制显示错误" class="headerlink" title="php强制显示错误"></a>php强制显示错误</h3><blockquote><p>ini_set(‘display_errors’, ‘1’);<br>error_reporting(E_ALL);</p></blockquote><h3 id="MySQL修改root密码的4种方法"><a href="#MySQL修改root密码的4种方法" class="headerlink" title="MySQL修改root密码的4种方法"></a>MySQL修改root密码的4种方法</h3><p><a href="https://blog.csdn.net/qq_33285112/article/details/78982766" target="_blank" rel="noopener">https://blog.csdn.net/qq_33285112/article/details/78982766</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">方法1： 用SET PASSWORD命令 </span><br><span class="line">首先登录MySQL。 </span><br><span class="line">格式：mysql&gt; set password for 用户名@localhost = password(‘新密码’); </span><br><span class="line">例子：mysql&gt; set password for root@localhost = password(‘123’);</span><br><span class="line"></span><br><span class="line">方法2：用mysqladmin </span><br><span class="line">格式：mysqladmin -u用户名 -p旧密码 password 新密码 </span><br><span class="line">例子：mysqladmin -uroot -p123456 password 123</span><br><span class="line"></span><br><span class="line">方法3：用UPDATE直接编辑user表 </span><br><span class="line">首先登录MySQL。 </span><br><span class="line">mysql&gt; use mysql; </span><br><span class="line">mysql&gt; update user set password=password(‘123’) where user=’root’ and host=’localhost’; </span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">方法4：在忘记root密码的时候，可以这样 </span><br><span class="line">以windows为例： </span><br><span class="line">1. 关闭正在运行的MySQL服务。 </span><br><span class="line">2. 打开DOS窗口，转到mysql\bin目录。 </span><br><span class="line">3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。 </span><br><span class="line">4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。 </span><br><span class="line">5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 </span><br><span class="line">6. 连接权限数据库： use mysql; 。 </span><br><span class="line">6. 改密码：update user set password=password(“123”) where user=”root”;（别忘了最后加分号） 。 </span><br><span class="line">7. 刷新权限（必须步骤）：flush privileges;　。 </span><br><span class="line">8. 退出 quit。 </span><br><span class="line">9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</span><br></pre></td></tr></table></figure><h3 id="linux-环境变量设置（临时-永久）"><a href="#linux-环境变量设置（临时-永久）" class="headerlink" title="linux 环境变量设置（临时+永久）"></a>linux 环境变量设置（临时+永久）</h3><p><a href="https://blog.csdn.net/yi412/article/details/11523525" target="_blank" rel="noopener">https://blog.csdn.net/yi412/article/details/11523525</a></p><p>暂时这么多</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;将目录和子目录都设成该权限&quot;&gt;&lt;a href=&quot;#将目录和子目录都设成该权限&quot; class=&quot;headerlink&quot; title=&quot;将目录和子目录都设成该权限&quot;&gt;&lt;/a&gt;将目录和子目录都设成该权限&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;chmod -R 777 
      
    
    </summary>
    
    
      <category term="仓库" scheme="https://lyubingo.github.io/tags/%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7.4搭建生产环境</title>
    <link href="https://lyubingo.github.io/2018/08/17/9CentOS7-4%E6%90%AD%E5%BB%BA%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/"/>
    <id>https://lyubingo.github.io/2018/08/17/9CentOS7-4搭建生产环境/</id>
    <published>2018-08-17T06:11:49.000Z</published>
    <updated>2018-08-18T03:55:05.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建php生产环境"><a href="#搭建php生产环境" class="headerlink" title="搭建php生产环境"></a>搭建php生产环境</h2><p>起因：本来这些都由运维那边来做，nginx，php，mysql以及redis/git库一键生成，但是老板前天给了我一个阿里云服务器，要我部署代码。发现阿里云自带的一键部署不会用之后，我决定自己手动搭建。</p><p>首先从运维处拿到配置信息：</p><p><img src="https://lyubingo.github.io/img/9one.png" alt="运维给的配置信息"></p><p>配置信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS 7.4</span><br><span class="line">Nginx 1.12.2</span><br><span class="line">PHP 5.6</span><br><span class="line">MariaDB 10.1.29</span><br><span class="line">Redis 3.2.11 端口6379</span><br></pre></td></tr></table></figure></p><p>接下来便是手动安装。。中间不乏遇到了许多困难与阻碍，同时也发现，离开了google，几乎什么都不会。。</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p><a href="https://blog.csdn.net/harris135/article/details/78576263" target="_blank" rel="noopener">参考网址</a></p><p>下载nginx</p><blockquote><p>wget <a href="http://nginx.org/download/nginx-1.12.2.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.12.2.tar.gz</a></p></blockquote><p>解压安装包</p><blockquote><p>tar zxvf nginx-1.12.2.tar.gz</p></blockquote><p>配置安装路径， cd nginx-1.12.2目录</p><blockquote><p> ./configure –prefix=/usr/local/nginx</p></blockquote><p>提示缺少包， 要安装pcre,pcre-devel,zlib,zlib-devel,依次安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install pcre</span><br><span class="line">yum install pcre-devel</span><br><span class="line">yum install zlib</span><br><span class="line">yum install zlib-devel</span><br></pre></td></tr></table></figure></p><p>编译</p><blockquote><p>make &amp; make install</p></blockquote><p>切换到/usr/local/nginx 下，看到如下4个目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">….conf 配置文件 </span><br><span class="line">… html 网页文件 </span><br><span class="line">…logs 日志文件 </span><br><span class="line">…sbin 主要二进制程序</span><br></pre></td></tr></table></figure></p><p>启动：</p><blockquote><p>./sbin/nginx</p></blockquote><p>查看启动的进程和端口</p><blockquote><p>ps -ef|grep nginx </p></blockquote><p>如果有进程占用了80端口，可以杀掉占用的进程</p><blockquote><p>netstat -ant<br>kill -9 pid</p></blockquote><p>访问nginx首页，输入ip直接访问，如果有页面则表明安装成功。</p><p>测试配置文件是否正确</p><blockquote><p>./sbin/nginx -t<br>重启<br>./sbin/nginx -s reload</p></blockquote><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><p><a href="https://www.linuxidc.com/Linux/2017-10/147344.htm" target="_blank" rel="noopener">参考网址</a></p><p>添加MariaDB yum源，创建MariaDB.repo</p><blockquote><p>sudo vi /etc/yum.repos.d/Mariadb.repo</p></blockquote><p>将以下文件中的字段添加到<strong>MariaDb.repo</strong>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># MariaDB 10.1 CentOS repository list - created 2016-12-01 03:36 UTC</span><br><span class="line"># http://downloads.mariadb.org/mariadb/repositories/</span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.1/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><p>yum安装MariaDB</p><blockquote><p>sudo yum -y install MariaDB-server MariaDB-client</p></blockquote><p>但是这个下载的过程非常卡，不知道翻墙是否可以解决，或者有更快的国内镜像源</p><p>启动MariaDB服去</p><blockquote><p>systemctl start mysql.service</p></blockquote><p>使用</p><blockquote><p>mysql_secure_installation<br>配置MariaDB服务</p></blockquote><p>具体配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#由于一开始安装MariaDB数据库后, root用户默认密码为空, 所以只需要按Enter键</span><br><span class="line">Enter current password for root (enter for none):</span><br><span class="line"></span><br><span class="line">#是否设置root用户的新密码</span><br><span class="line">Set root password? [Y/n] y</span><br><span class="line"></span><br><span class="line">#录入新密码</span><br><span class="line">New password:</span><br><span class="line"></span><br><span class="line">#确认新密码</span><br><span class="line">Re-enter new password:</span><br><span class="line"></span><br><span class="line">#是否删除匿名用户,生产环境建议删除</span><br><span class="line">Remove anonymous users? [Y/n] y</span><br><span class="line"></span><br><span class="line">#是否禁止root远程登录,根据自己的需求选择</span><br><span class="line">Disallow root login remotely? [Y/n] n</span><br><span class="line"></span><br><span class="line">#是否删除test数据库</span><br><span class="line">Remove test database and access to it? [Y/n] y</span><br><span class="line"></span><br><span class="line">#是否重新加载权限表</span><br><span class="line">Reload privilege tables now? [Y/n] y</span><br></pre></td></tr></table></figure></p><p>开启远程访问（是关于防火墙的，我的机器上没有防火墙）</p><p>查看firewall状态</p><blockquote><p>firewall-cmd –state</p></blockquote><p>如果是开启的，开放3306端口</p><blockquote><p>firewall-cmd –zone=public –add-port=3306/tcp –permanent<br>重新加载防火墙<br>firewall-cmd –reload</p></blockquote><p>如果还是访问不了，可以使用数据库的各种方法， 改表，grant等，见其他博文。</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p><a href="https://towait.com/blog/1417" target="_blank" rel="noopener">参考网址</a><br><a href="https://blog.csdn.net/TH_NUM/article/details/78195568" target="_blank" rel="noopener">参考网址2</a></p><p>CentOS7.4默认的php版本是5.4，所以首先需要更新源</p><p>检查当前安装的php包</p><blockquote><p>yum list installed | grep php</p></blockquote><p>如果有php包， 先删除他们</p><blockquote><p>yum remove php.x86_64 php-cli.x86_64 php-common.x86_64 php-gd.x86_64 php-ldap.x86_64 php-mbstring.x86_64 php-mcrypt.x86_64 php-mysql.x86_64 php-pdo.x86_64  </p></blockquote><p>配置yum源</p><blockquote><p>yum install epel-release<br>rpm -ivh <a href="http://rpms.famillecollet.com/enterprise/remi-release-7.rpm" target="_blank" rel="noopener">http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</a></p></blockquote><p>也可以参考参考网址1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">wget https://rpms.remirepo.net/enterprise/remi-release-7.rpm</span><br><span class="line">rpm -ivh remi-release-7.rpm</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure></p><p>使用yum list 命令查看可安装的包（Package)</p><blockquote><p>yum list –enablerepo=remi –enablerepo=remi-php56 | grep php</p></blockquote><p>安装PHP5.6</p><blockquote><p>yum install –enablerepo=remi –enablerepo=remi-php56 php php-opcache php-devel php-mbstring php-mcrypt php-mysqlnd php-phpunit-PHPUnit php-pecl-xdebug php-pecl-xhprof</p></blockquote><p>不过我没有用上面的这个，我用参考网址1的安装命令</p><blockquote><p>yum install php56 php56-php php56-php-mysqlnd php56-php-gd php56-php-mcrypt php56-php-mbstring php56-php-xml php56-php-cli</p></blockquote><p>应该就是安装的包不同，继续杂糅： 如果需要安装ioncube loader,我不知道这是什么，故没有进行安装</p><blockquote><p>yum install php56-php-ioncube-loader</p></blockquote><p>安装php-fpm</p><blockquote><p>yum install php56-php-fpm</p></blockquote><p>是的，此后php都带上了56的标签</p><p>修改php-fpm向光配置</p><blockquote><p>vi /opt/remi/php56/root/etc/php-fpm.d/<a href="http://www.conf" target="_blank" rel="noopener">www.conf</a></p></blockquote><p>操作php-fpm相关服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl php56-php-fpm status</span><br><span class="line">systemctl start php56-php-fpm</span><br><span class="line">systemctl stop php56-php-fpm</span><br><span class="line">systemctl restart php56-php-fpm</span><br></pre></td></tr></table></figure></p><p>查看php版本为：</p><blockquote><p>php56 -v</p></blockquote><p>修改php.ini文件</p><blockquote><p>vi /opt/remi/php56/root/etc/php.ini</p></blockquote><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p><a href="https://blog.csdn.net/qq_19399235/article/details/78313633" target="_blank" rel="noopener">参考网址</a></p><p><strong>关闭防火墙</strong>后配置编译环境：</p><blockquote><p>sudo yum install gcc-c++</p></blockquote><p>下载源码 (3.2.1) ：</p><blockquote><p>wget <a href="http://download.redis.io/releases/redis-3.2.11.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-3.2.11.tar.gz</a></p></blockquote><p>解压源码：</p><blockquote><p>tar -zxvf redis-3.2.11.tar.gz</p></blockquote><p>进入解压后目录，执行make编译Redis：</p><blockquote><p>make MALLOC=libc</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：make命令执行完成编译后，会在src目录下生成6个可执行文件，分别是redis-server、redis-cli、redis-benchmark、redis-check-aof、redis-check-rdb、redis-sentinel。</span><br></pre></td></tr></table></figure><p>安装Redis</p><blockquote><p>make install</p></blockquote><p>配置Redis能随系统启动：</p><blockquote><p>./utils/install_server.sh</p></blockquote><p>Redis服务查看、开启、关闭：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.通过ps -aux|grep redis命令查看Redis进程</span><br><span class="line"></span><br><span class="line">b.开启Redis服务操作通过/etc/init.d/redis_6379 start命令，也可通过（service redis_6379 start）</span><br><span class="line">c.关闭Redis服务操作通过/etc/init.d/redis_6379 stop命令，也可通过（service redis_6379 stop）</span><br></pre></td></tr></table></figure><p>Redis.conf的配置信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">redis.conf 的配置信息</span><br><span class="line">1、daemonize 如果需要在后台运行，把该项改为yes</span><br><span class="line">2、pidfile 配置多个pid的地址 默认在/var/run/redis.pid</span><br><span class="line">3、bind 绑定ip，设置后只接受来自该ip的请求</span><br><span class="line">4、port 监听端口，默认是6379</span><br><span class="line">5、loglevel 分为4个等级：debug verbose notice warning</span><br><span class="line">6、logfile 用于配置log文件地址</span><br><span class="line">7、databases 设置数据库个数，默认使用的数据库为0</span><br><span class="line">8、save 设置redis进行数据库镜像的频率。</span><br><span class="line">9、rdbcompression 在进行镜像备份时，是否进行压缩</span><br><span class="line">10、dbfilename 镜像备份文件的文件名</span><br><span class="line">11、Dir 数据库镜像备份的文件放置路径</span><br><span class="line">12、Slaveof 设置数据库为其他数据库的从数据库</span><br><span class="line">13、Masterauth 主数据库连接需要的密码验证</span><br><span class="line">14、Requriepass 设置 登陆时需要使用密码</span><br><span class="line">15、Maxclients 限制同时使用的客户数量</span><br><span class="line">16、Maxmemory 设置redis能够使用的最大内存</span><br><span class="line">17、Appendonly 开启append only模式</span><br><span class="line">18、Appendfsync 设置对appendonly.aof文件同步的频率（对数据进行备份的第二种方式）</span><br><span class="line">19、vm-enabled 是否开启虚拟内存支持 （vm开头的参数都是配置虚拟内存的）</span><br><span class="line">20、vm-swap-file 设置虚拟内存的交换文件路径</span><br><span class="line">21、vm-max-memory 设置redis使用的最大物理内存大小</span><br><span class="line">22、vm-page-size 设置虚拟内存的页大小</span><br><span class="line">23、vm-pages 设置交换文件的总的page数量</span><br><span class="line">24、vm-max-threads 设置VM IO同时使用的线程数量</span><br><span class="line">25、Glueoutputbuf 把小的输出缓存存放在一起</span><br><span class="line">26、hash-max-zipmap-entries 设置hash的临界值</span><br><span class="line">27、Activerehashing 重新hash</span><br></pre></td></tr></table></figure></p><h3 id="phpredis"><a href="#phpredis" class="headerlink" title="phpredis"></a>phpredis</h3><p><a href="https://blog.csdn.net/qq_33324608/article/details/75533087" target="_blank" rel="noopener">参考网址</a></p><p>准备依赖包</p><blockquote><p>yum install wget make gcc gcc-c++ zlib-devel openssl openssl-devel pcre-devel kernel keyutils patch perl</p></blockquote><p>安装</p><blockquote><p>wget <a href="https://github.com/nicolasff/phpredis/archive/2.2.4.tar.gz" target="_blank" rel="noopener">https://github.com/nicolasff/phpredis/archive/2.2.4.tar.gz</a><br>tar -zxvf 2.2.4.tar.gz 或者 tar xvf 2.2.4.tar.gz</p></blockquote><p>进入解压目录，用phpize生成configure配置文件</p><p>这里有个坑，我本地的phpize不在/usr/local/php/bin/phpize，二在/opt/remi/php56/root/bin/phpize</p><p>但是使用该命令依然出错，提示缺少php-devel</p><p>然后我机智使用yum install php56-devel，而不是install php-devel, 但是依然报错， 可能是因为少了个w？ install php56w-devel, 还是不行。。。</p><p>google的都通过以上解决了，但我的就是不行，单独下载php56w-devel都不行，而且php-devel显示下载成功，但phpize不起作用，php -v 竟然显示php版本为5.4，头大。 后来无意中发现可以使用yum 命令查看可安装包列表</p><blockquote><p>yum list –enablerepo=remi –enablerepo=remi-php56 | grep php</p></blockquote><p>发现它的yum名字是。。   php56-php-devel</p><blockquote><p>yum install php56-php-devel</p></blockquote><p>然后phpize可以使用了（需在phpredis根目录下执行）</p><p>好了，接下来，配置 (注意路径)</p><blockquote><p>./configure –with-php-config=/opt/remi/php56/root/bin/php-config</p></blockquote><p>编译安装</p><blockquote><p>make &amp;&amp; make install</p></blockquote><p>然后</p><blockquote><p>vim /opt/remi/php56/root/etc/php.ini<br>extension = redis.so</p></blockquote><p>重启php56-php-fpm</p><p>OK！ everything is done !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建php生产环境&quot;&gt;&lt;a href=&quot;#搭建php生产环境&quot; class=&quot;headerlink&quot; title=&quot;搭建php生产环境&quot;&gt;&lt;/a&gt;搭建php生产环境&lt;/h2&gt;&lt;p&gt;起因：本来这些都由运维那边来做，nginx，php，mysql以及redis/git
      
    
    </summary>
    
    
      <category term="搭建环境" scheme="https://lyubingo.github.io/tags/%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>好久没写博客了，检讨一下</title>
    <link href="https://lyubingo.github.io/2018/08/15/8%E5%A5%BD%E4%B9%85%E6%B2%A1%E5%86%99%E5%8D%9A%E5%AE%A2%E4%BA%86%EF%BC%8C%E6%A3%80%E8%AE%A8%E4%B8%80%E4%B8%8B/"/>
    <id>https://lyubingo.github.io/2018/08/15/8好久没写博客了，检讨一下/</id>
    <published>2018-08-15T12:05:57.000Z</published>
    <updated>2018-08-15T12:23:29.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="好久没有写博客了"><a href="#好久没有写博客了" class="headerlink" title="好久没有写博客了"></a>好久没有写博客了</h2><h3 id="最近不好也不坏"><a href="#最近不好也不坏" class="headerlink" title="最近不好也不坏"></a>最近不好也不坏</h3><p>总的来说，算好的。因为，快要转正了，一个人扛下来，不容易。</p><p>总结起来有两个原因，一是我可以应付业务代码——也不是太难，二是也有人配合操作，比如代码、环境都是现成的，我只要在本地搭好环境就可以开始干活。</p><p>不过自己还是挺菜的，技术世界宽广无边，还是有许多不足的地方。</p><p>比如，除了写业务代码，除了curd，我还能干什么？</p><p>环境不熟，git也仅只会用，开源不关注，平常也不学习，。。</p><p>程序员这条路， 不知道还能走多久。</p><blockquote><p>希望一切都好。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;好久没有写博客了&quot;&gt;&lt;a href=&quot;#好久没有写博客了&quot; class=&quot;headerlink&quot; title=&quot;好久没有写博客了&quot;&gt;&lt;/a&gt;好久没有写博客了&lt;/h2&gt;&lt;h3 id=&quot;最近不好也不坏&quot;&gt;&lt;a href=&quot;#最近不好也不坏&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="抱歉" scheme="https://lyubingo.github.io/tags/%E6%8A%B1%E6%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>功能性（比如phpstorm破解）汇集于此</title>
    <link href="https://lyubingo.github.io/2018/06/20/7%E5%8A%9F%E8%83%BD%E6%80%A7%EF%BC%88%E6%AF%94%E5%A6%82phpstorm%E7%A0%B4%E8%A7%A3%EF%BC%89%E6%B1%87%E9%9B%86%E4%BA%8E%E6%AD%A4/"/>
    <id>https://lyubingo.github.io/2018/06/20/7功能性（比如phpstorm破解）汇集于此/</id>
    <published>2018-06-20T07:01:39.000Z</published>
    <updated>2018-06-20T07:18:58.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这里存放一些，篇幅不长，但是比较重要的东西"><a href="#这里存放一些，篇幅不长，但是比较重要的东西" class="headerlink" title="这里存放一些，篇幅不长，但是比较重要的东西"></a>这里存放一些，篇幅不长，但是比较重要的东西</h2><h3 id="1-phpstorm（2018）破解"><a href="#1-phpstorm（2018）破解" class="headerlink" title="1.phpstorm（2018）破解"></a>1.phpstorm（2018）破解</h3><p>原文链接<a href="https://blog.csdn.net/qq_26291823/article/details/80094410" target="_blank" rel="noopener">https://blog.csdn.net/qq_26291823/article/details/80094410</a></p><p>内容： 在线激活IP地址：</p><blockquote><p><a href="http://180.76.140.202:9123" target="_blank" rel="noopener">http://180.76.140.202:9123</a></p></blockquote><p>在phpstorm中在线激活即可。</p><h3 id="2-虚拟机安装。"><a href="#2-虚拟机安装。" class="headerlink" title="2. 虚拟机安装。"></a>2. 虚拟机安装。</h3><p>官网下在vbox，自己下载iso，然后根据这篇百度经验配置：</p><blockquote><p><a href="https://jingyan.baidu.com/article/4dc4084868a1e4c8d946f133.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/4dc4084868a1e4c8d946f133.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;这里存放一些，篇幅不长，但是比较重要的东西&quot;&gt;&lt;a href=&quot;#这里存放一些，篇幅不长，但是比较重要的东西&quot; class=&quot;headerlink&quot; title=&quot;这里存放一些，篇幅不长，但是比较重要的东西&quot;&gt;&lt;/a&gt;这里存放一些，篇幅不长，但是比较重要的东西&lt;/
      
    
    </summary>
    
    
      <category term="仓库" scheme="https://lyubingo.github.io/tags/%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>laravel安装Intervention Image</title>
    <link href="https://lyubingo.github.io/2018/06/15/6laravel%E5%AE%89%E8%A3%85Intervention-Image/"/>
    <id>https://lyubingo.github.io/2018/06/15/6laravel安装Intervention-Image/</id>
    <published>2018-06-15T07:27:35.000Z</published>
    <updated>2018-06-15T08:33:46.086Z</updated>
    
    <content type="html"><![CDATA[<p>在做小程序的时候，觉得应该处理图片，使用的是laravel的扩展intervetion image, 参考的这篇文章：</p><p><a href="https://phpartisan.cn/news/4.html" target="_blank" rel="noopener">laravel使用intervention/image处理图片</a></p><h2 id="1-使用composer安装依赖"><a href="#1-使用composer安装依赖" class="headerlink" title="1.使用composer安装依赖"></a>1.使用composer安装依赖</h2><blockquote><p>composer require intervention/image</p></blockquote><p>当我执行以上的时候，在自己的mac上进展顺利，但是远程服务器上不可以。原因是php没有fileinfo的扩展。</p><p><strong>另外，以上命令请到laravel下去执行。</strong></p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php --ini</span><br></pre></td></tr></table></figure><p>展示php.ini的位置，然后进入里面，把扩展fileinfo前用来注释的分号去掉。</p><p>可还是不行，因为，<b>并没有安装该扩展</b>。</p><p>由于是用oneinstack搭建的，google得知可以十分简便的安装该扩展，参考链接：</p><p><a href="https://oneinstack.com/question/oneinstack-how-to-support-the-fileinfo/" target="_blank" rel="noopener">oneinstack安装fileinfo扩展</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/oneinstack</span><br><span class="line">./addons.sh</span><br><span class="line">选择4，然后选择1，安装成后按 q 退出</span><br></pre></td></tr></table></figure><p>然后可以使用oneinstack提供的方法重启php</p><blockquote><p>service php-fpm restart<br>nginx -s reload</p></blockquote><p>以上第二条属于重启服务器，我这样操作了一下。</p><h2 id="2-配置拓展"><a href="#2-配置拓展" class="headerlink" title="2.配置拓展"></a>2.配置拓展</h2><p>在config/app.php中注册服务提供者到providers数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Intervention\Image\ImageServiceProvider::class</span><br></pre></td></tr></table></figure><p>同样在config/app.php中注册门面到aliases数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;Image&apos; =&gt; Intervention\Image\Facades\Image::class</span><br></pre></td></tr></table></figure><p>执行如下代码发布资源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider=&quot;Intervention\Image\ImageServiceProviderLaravel5&quot;</span><br></pre></td></tr></table></figure><p>将包的配置文件config/image.php发布到应用根目录的config目录下以便可以访问和配置。</p><h2 id="3-需求条件"><a href="#3-需求条件" class="headerlink" title="3.需求条件"></a>3.需求条件</h2><p>默认情况下，Intervention Image使用PHP的GD库扩展处理所有图片，如果你想要切换到Imagick，可以在config/image.php中修改，使用先确定本地已经安装好 GD 或 Imagick.</p><h2 id="4-基础用法"><a href="#4-基础用法" class="headerlink" title="4.基础用法"></a>4.基础用法</h2><p>1.读取图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&apos;/&apos;, function()&#123;</span><br><span class="line">    $img = Image::make(&apos;foo/bar/baz.jpg&apos;);</span><br><span class="line">    return $img-&gt;response(&apos;jpg&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.绘制图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img = Image::canvas(800, 600, &apos;#ccc&apos;);</span><br></pre></td></tr></table></figure></p><p>3.编辑图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img = Image::make(&apos;foo.jpg&apos;)-&gt;resize(320, 240)-&gt;insert(&apos;watermark.png&apos;);</span><br></pre></td></tr></table></figure><p>4.上传图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// resizing an uploaded file</span><br><span class="line">Image::make(Input::file(&apos;photo&apos;))-&gt;resize(300, 200)-&gt;save(&apos;foo.jpg&apos;);</span><br></pre></td></tr></table></figure><p>5.旋转图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img-&gt;rotate(-45);</span><br></pre></td></tr></table></figure><p>6.压缩图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$img = Image::make(&apos;foo.jpg&apos;)-&gt;resize(500, 400);</span><br><span class="line">// 只改变宽度，高度不变，注意：会变形</span><br><span class="line">$img-&gt;resize(300, null);</span><br><span class="line">// 宽度为300,高度自动调整，不会变形</span><br><span class="line">$img-&gt;resize(300, null, function ($constraint) &#123;</span><br><span class="line">    $constraint-&gt;aspectRatio();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>7.缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$img = Image::cache(function($image) &#123;</span><br><span class="line">    $image-&gt;make(&apos;public/foo.jpg&apos;)-&gt;resize(300, 200)-&gt;greyscale();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>8.添加水印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 修改指定图片的大小</span><br><span class="line">$img = Image::make(&apos;images/avatar.jpg&apos;)-&gt;resize(200, 200);</span><br><span class="line"></span><br><span class="line">// 插入水印, 水印位置在原图片的右下角, 距离下边距 10 像素, 距离右边距 15 像素</span><br><span class="line">$img-&gt;insert(&apos;images/watermark.png&apos;, &apos;bottom-right&apos;, 15, 10);</span><br><span class="line"></span><br><span class="line">// 将处理后的图片重新保存到其他路径</span><br><span class="line">$img-&gt;save(&apos;images/new_avatar.jpg&apos;);</span><br><span class="line"></span><br><span class="line">/* 上面的逻辑可以通过链式表达式搞定 */</span><br><span class="line">$img = Image::make(&apos;images/avatar.jpg&apos;)-&gt;resize(200, 200)-&gt;insert(&apos;images/new_avatar.jpg&apos;, &apos;bottom-right&apos;, 15, 10);</span><br></pre></td></tr></table></figure><p>9.一行解决所有问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//上传并且压缩宽度为800高度自己适应，插入水印并且随机命名保存</span><br><span class="line">$img = Image::make(Input::file(&apos;photo&apos;))-&gt;resize(800, null, function ($constraint) &#123;$constraint-&gt;aspectRatio();&#125;)-&gt;insert(&apos;img/logo.png&apos;, &apos;bottom-right&apos;, 15, 10)-&gt;save(&apos;/uploads/&apos;.date(&quot;YmdHis&quot;,time()).rand(1000,9999).&quot;.png&quot;);</span><br></pre></td></tr></table></figure><p>10.添加文字/文字水印<br>使用text方法可以添加文字水印，他还有很多熟悉你可以从官网查看，Demo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img-&gt;text(&apos;The quick brown fox jumps over the lazy dog.&apos;, 120, 100);</span><br></pre></td></tr></table></figure><p>如果要查看效果就return $img-&gt;response(‘png’);一下，修改后要保存需要单独$img-&gt;save(‘1.png’);好了，讲到这里，还有9几种方法，大家去官方文档看一下吧！</p><p><b>仅做借鉴，最好还是看官方文档，虽然是全英文的</b></p><h2 id="获取Intervention处理后的图片上传到OSS等云存储"><a href="#获取Intervention处理后的图片上传到OSS等云存储" class="headerlink" title="获取Intervention处理后的图片上传到OSS等云存储"></a>获取Intervention处理后的图片上传到OSS等云存储</h2><p>由于执行我们的图片处理只有response和response，所以我们操作以前必须要保存一下，然后通过basePath()拿到保存后的路径上传：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$file = $request-&gt;file(&apos;fileUp&apos;);</span><br><span class="line">$img = Image::make($file-&gt;getRealPath())-&gt;insert(&apos;img/logo.png&apos;, &apos;top-left&apos;, 15, 15)-&gt;save(&apos;images/new_avatar.jpg&apos;);</span><br><span class="line"># 保存后的路径，用于上传删除</span><br><span class="line">$img-&gt;basePath()</span><br></pre></td></tr></table></figure><p>官方文档：<a href="http://image.intervention.io/" target="_blank" rel="noopener">Intervention Image官方文档</a></p><p>原文出处： <a href="https://phpartisan.cn/news/4.html" target="_blank" rel="noopener">https://phpartisan.cn/news/4.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在做小程序的时候，觉得应该处理图片，使用的是laravel的扩展intervetion image, 参考的这篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://phpartisan.cn/news/4.html&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="laravel" scheme="https://lyubingo.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>在腾讯云上安装redis</title>
    <link href="https://lyubingo.github.io/2018/06/13/5%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%8A%E5%AE%89%E8%A3%85redis/"/>
    <id>https://lyubingo.github.io/2018/06/13/5在腾讯云上安装redis/</id>
    <published>2018-06-13T08:58:10.000Z</published>
    <updated>2018-06-13T10:10:39.673Z</updated>
    
    <content type="html"><![CDATA[<p>开门见山：</p><p>参考的这篇文章：<a href="https://www.jianshu.com/p/ebda253a8daa" target="_blank" rel="noopener">https://www.jianshu.com/p/ebda253a8daa</a></p><h2 id="更改yum源"><a href="#更改yum源" class="headerlink" title="更改yum源"></a>更改yum源</h2><p>将Centos的yum源更换为国内的阿里云源</p><p>备份你的原镜像文件，保证出错后可以恢复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><p>下载新的CentOS-Base.repo 到/etc/yum.repos.d/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure></p><p>以上两步我没有做，因为我觉得自己的yum源没有问题。</p><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install redis</span><br></pre></td></tr></table></figure><h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis.service</span><br></pre></td></tr></table></figure><h2 id="设置redis开机启动"><a href="#设置redis开机启动" class="headerlink" title="设置redis开机启动"></a>设置redis开机启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable redis.service</span><br></pre></td></tr></table></figure><h2 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h2><h3 id="设置redis密码"><a href="#设置redis密码" class="headerlink" title="设置redis密码"></a>设置redis密码</h3><p>打开文件/etc/redis.conf，找到其中的# requirepass foobared，去掉前面的#，并把foobared改成你的密码。</p><blockquote><p>除了/etc/下的redis.conf ， /usr/local/etc/redis/redis.conf也有一份 , 除了将密码设置了之外， 还改了redis的端口， 即 port 6379 改了。</p></blockquote><p>redis.conf文件默认在/etc目录下，你可以更改它的位置和名字，更改后，注意在文件/usr/lib/systemd/system/redis.service中，把ExecStart=/usr/bin/redis-server /etc/redis/6379.conf –daemonize no中的redis.conf的路径改成的新的路径。</p><blockquote><p>没有更改位置或者名字</p></blockquote><p>因为环境是用oneinstack装的，选择了带有redis，所以phpredis不需要自己装。</p><p>好了，准备线上调试了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开门见山：&lt;/p&gt;
&lt;p&gt;参考的这篇文章：&lt;a href=&quot;https://www.jianshu.com/p/ebda253a8daa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/ebda253a8d
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://lyubingo.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>mac重启之后需要做哪些事</title>
    <link href="https://lyubingo.github.io/2018/06/11/4mac%E9%87%8D%E5%90%AF%E4%B9%8B%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E5%93%AA%E4%BA%9B%E4%BA%8B/"/>
    <id>https://lyubingo.github.io/2018/06/11/4mac重启之后需要做哪些事/</id>
    <published>2018-06-11T08:48:12.000Z</published>
    <updated>2018-06-11T09:01:29.516Z</updated>
    
    <content type="html"><![CDATA[<p>装了cleanmymac后重启了一次，然后就毛病百出，目前发现两处，要么是没有启动，要么是没有更新造成的。</p><h1 id="1-nvm"><a href="#1-nvm" class="headerlink" title="1. nvm"></a>1. nvm</h1><p>除了nvm命令，node和hexo也找不到，这种情况需要</p><blockquote><p>source ~/.bash_profile</p></blockquote><p>就好了。</p><p>然后，目前发现的第二个， redis 需要重新启动：</p><h1 id="2-redis"><a href="#2-redis" class="headerlink" title="2. redis"></a>2. redis</h1><p>当初是用brew装的， 万般大法： </p><blockquote><p>history | grep 匹配</p></blockquote><p>就可以想起来自己怎么写的了</p><p>redis配置文件在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure></p><p>启动的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/redis-sever /usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure></p><p>需要注意的是我端口被我改到7241了，并且设置了密码，因此本地登录要这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 7241 -a 密码</span><br></pre></td></tr></table></figure></p><p>关闭redis：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 7241 shutdown</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;装了cleanmymac后重启了一次，然后就毛病百出，目前发现两处，要么是没有启动，要么是没有更新造成的。&lt;/p&gt;
&lt;h1 id=&quot;1-nvm&quot;&gt;&lt;a href=&quot;#1-nvm&quot; class=&quot;headerlink&quot; title=&quot;1. nvm&quot;&gt;&lt;/a&gt;1. nvm&lt;/h
      
    
    </summary>
    
    
      <category term="mac" scheme="https://lyubingo.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>mac的PHP环境原来是怎么配置的</title>
    <link href="https://lyubingo.github.io/2018/06/08/3mac%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8E%9F%E6%9D%A5%E6%98%AF%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AE%E7%9A%84/"/>
    <id>https://lyubingo.github.io/2018/06/08/3mac的环境原来是怎么配置的/</id>
    <published>2018-06-08T10:02:47.000Z</published>
    <updated>2018-06-11T02:09:44.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建PHP环境"><a href="#搭建PHP环境" class="headerlink" title="搭建PHP环境"></a>搭建PHP环境</h1><p>电脑买了也有一段时间了，买回来没多久我就搭了环境，<br>参照的是这篇文章：</p><p><a href="https://segmentfault.com/a/1190000011760937" target="_blank" rel="noopener">原文地址</a></p><p>在此表示很感谢，因为很详细。</p><p>我大概过一下。</p><blockquote><p>Preparing<br>安装 Homebrew、Ohmyzsh、开发常用包&amp;软件</p></blockquote><h3 id="1-1-Homebrew"><a href="#1-1-Homebrew" class="headerlink" title="1.1 Homebrew"></a>1.1 Homebrew</h3><p>Homebrew又叫Brew，是MacOS上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件，和linux系统中的yum非常相似，只需要一个命令，非常方便。官方网站：<a href="http://brew.sh" target="_blank" rel="noopener">http://brew.sh</a></p><p>（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>检验是否安装成功</p><blockquote><p>brew doctor</p></blockquote><p>安装常用软件包</p><blockquote><p>brew install wget<br>brew install autoconf<br>brew install openssl</p></blockquote><p>Brew常用语句，以php70为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#我这里以操作 php70 为例</span><br><span class="line">brew update                        #更新brew可安装包，建议每次执行一下</span><br><span class="line">brew search php70                  #搜索php7.0</span><br><span class="line">brew tap josegonzalez/php          #安装扩展&lt;gihhub_user/repo&gt;   </span><br><span class="line">brew tap                           #查看安装的扩展列表</span><br><span class="line">brew install php70                 #安装php7.0</span><br><span class="line">brew remove  php70                 #卸载php7.0</span><br><span class="line">brew upgrade php70                 #升级php7.0</span><br><span class="line">brew options php70                 #查看php7.0安装选项</span><br><span class="line">brew info    php70                 #查看php7.0相关信息</span><br><span class="line">brew home    php70                 #访问php7.0官方网站</span><br></pre></td></tr></table></figure></p><p><em>人在天朝的话，极有可能出现安装速度过于缓慢的情况，有时候会让你感觉安装处于假死的状态，不必担心，耐心等待即可，切不可心烦意乱的关闭终端窗口（网上有其他教程说可以切换 brew 的源到中科大 CDN，本人亲测：中科大 CDN 虽然快很多，但是clone 下来的文件和原本源存在一定差异，更新不及时。个人建议还是耐心等待，使用原本的源），我是翻墙出去的，嘻嘻。</em></p><h3 id="1-2-Oh-my-zsh"><a href="#1-2-Oh-my-zsh" class="headerlink" title="1.2 Oh my zsh"></a>1.2 Oh my zsh</h3><p>目前常用的 Linux 系统和 Mac OS 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh，史称『终极 Shell』，这玩意儿就像「X天 Php 从入门到放弃」系列，但这次是真的神功速成。Github：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrusse…</a> </p><p>安装方法：（打开 Terminal 终端，输入）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure></p><p><em>在天朝的话，极有可能出现安装速度过于缓慢的情况，有时候会让你感觉安装处于假死的状态，不必担心，耐心等待即可，切不可心烦意乱的关闭终端窗口（网上有其他教程说可以切换 brew 的源到中科大 CDN，本人亲测：中科大 CDN 虽然快很多，但是clone 下来的文件和原本源存在一定差异，更新不及时。个人建议还是耐心等待，使用原本的源）</em></p><h3 id="1-3-Xcode"><a href="#1-3-Xcode" class="headerlink" title="1.3 Xcode"></a>1.3 Xcode</h3><p>Xcode 是苹果出品的包含一系列工具及库的开发套件。</p><blockquote><p>通过 AppStore 安装最新版本的 Xcode</p></blockquote><p>我们一般不会用 Xcode 来开发后端项目。但这一步也是必须的，因为 Xcode 会附带安装一些如 Git 等必要的软件</p><h4 id="1-3-1-Command-Line-Tools-for-Xcode"><a href="#1-3-1-Command-Line-Tools-for-Xcode" class="headerlink" title="1.3.1 Command Line Tools for Xcode"></a>1.3.1 Command Line Tools for Xcode</h4><p>这一步会帮你安装许多常见的基于 Unix 的工具。Xcode 命令行工具作为 Xcode 的一部分，包含了 GCC 编译器</p><p>安装方法（打开 Terminal 终端，输入）：</p><blockquote><p>xcode-select –install</p></blockquote><p>当 Xcode 和 Xcode Command Line Tools 安装完成后，你需要启动 Xcode，并点击同意接受许可协议，然后关闭 Xcode 就可以了。这一步骤也是必须的，否则 Xcode 包含的一系列开发工具都将不可用。</p><blockquote><p>Working On<br>安装 Mysql、Php72、redis、Nginx、创建虚拟机、配置 SSL</p></blockquote><h3 id="2-1-Mysql"><a href="#2-1-Mysql" class="headerlink" title="2.1 Mysql"></a>2.1 Mysql</h3><blockquote><p>brew install mysql</p></blockquote><p>MySQL的安装包相对较大，在这个步骤需要等待一段时间，下载失败后可多次尝试安装，Brew每次会自动寻找合适的下载源</p><p>设置 Mysql 开机启动方法（打开 Terminal 终端，输入）：</p><blockquote><p>ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents<br>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</p></blockquote><p>初始化、启动方法（打开 Terminal 终端，输入）：</p><blockquote><p>//正常初始化<br>/usr/local/opt/mysql/bin/mysql_secure_installation<br>//若出错请启动服务<br>brew services start mysql</p></blockquote><p>安全配置方法（Terminal 终端会提示[EnglishVersion]）：  </p><blockquote><p>Enter current password for root (enter for none):<br>直接 Enter，因为没有设置过<br>Change the root password? [Y/n]<br>是否更改 root 用户的密码<br>Remove anonymous users? [Y/n]<br>不需要，键入 Y<br>Disallow root login remotely? [Y/n]<br>禁止root远程登录，建议键入 Y<br>Remove test database and access to it? [Y/n]<br>删除测试数据表，建议键入 Y<br>Reload privilege tables now? [Y/n]<br>确保设置生效，键入 Y</p></blockquote><p>检验安装成功方法（打开 Terminal 终端，输入）：</p><p>查看端口 <code>ps aux | grep mysql</code></p><p>测试 Mysql 连接 <code>mysql -u root -p你设置的密码</code></p><p>比如已123456为例：</p><blockquote><p>mysql -u root -p 123456<br>也可以这样<br>mysql -uroot -p123456</p></blockquote><p>安装 Phpmyadmin 方法（打开 Terminal 终端，输入）：</p><blockquote><p>brew install phpmyadmin</p></blockquote><h3 id="2-2-Php"><a href="#2-2-Php" class="headerlink" title="2.2 Php"></a>2.2 Php</h3><p>安装准备（打开 Terminal 终端，输入）：</p><blockquote><p>brew tap homebrew/dupes<br>brew tap homebrew/versions<br>brew tap homebrew/homebrew-php</p></blockquote><p>如果我没记错的话，应该是报错了，原因是brew移除了它们。不管，接着来：</p><p>安装php72</p><blockquote><p>brew install php72</p></blockquote><p>配置 Php72 环境变量（打开 Terminal 终端，输入）：</p><blockquote><p>echo ‘export PATH=”$(brew –prefix php72)/bin:$PATH”‘ &gt;&gt; ~/.bash_profile<br>echo ‘export PATH=”$(brew –prefix php72)/sbin:$PATH”‘ &gt;&gt; ~/.bash_profile<br>echo ‘export PATH=”/usr/local/bin:/usr/local/sbib:$PATH”‘ &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile</p></blockquote><p>由于Mac自带了php和php-fpm，因此需要添加系统环境变量PATH来替代自带PHP版本。</p><p>验证 Php72 配置（打开 Terminal 终端，输入）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew安装的php，正常会显示 php7.2.0betaX  </span><br><span class="line">php -v #Mac自带的Php，正常会显示 php7.1.7  </span><br><span class="line">/usr/bin/php -v  #brew安装的php-fpm，正常会显示 php7.2.0betaX  </span><br><span class="line">php-fpm -v#Mac自带的Php-fpm，正常会显示 php7.1.7  </span><br><span class="line">/usr/bin/php-fpm -v</span><br></pre></td></tr></table></figure></p><p>可以在一开始就查看自带php的版本，因为php和mac自带的php都有可能升级，以上参数仅做参考。</p><blockquote><p>vim /usr/local/etc/php/7.2/php-fpm.conf /<strong>找到pid相关，去掉pid = run/php-fpm.pid前的“;”, 那么php-fpm的pid文件就会自动产生在 /usr/local/var/run/php-fpm.pid</strong>/</p></blockquote><p>php-fpm验证与启动（打开 Terminal 终端，输入）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#测试php-fpm配置 </span><br><span class="line">php-fpm -t</span><br><span class="line">php-fpm -c /usr/local/etc/php/7.2/php.ini -y /usr/local/etc/php/7.2/php-fpm.conf -t  </span><br><span class="line">#启动php-fpm  </span><br><span class="line">php-fpm -D  </span><br><span class="line">php-fpm -c /usr/local/etc/php/7.2/php.ini -y /usr/local/etc/php/7.2/php-fpm.conf -D  </span><br><span class="line">#关闭php-fpm  </span><br><span class="line">kill -INT `cat /usr/local/var/run/php-fpm.pid`  </span><br><span class="line">#重启php-fpm  </span><br><span class="line">kill -USR2 `cat /usr/local/var/run/php-fpm.pid`</span><br></pre></td></tr></table></figure></p><p>如果出现两个[notice]，不用管，除了他们没有其他错误的话，php-fpm 是可以正常启动了。如果出现其他错误，请尝试百度搜索，或者来联系我(原作者)</p><p>php-fpm设置开机启动（打开 Terminal 终端，输入）：</p><blockquote><p>ln -sfv /usr/local/opt/php72/*.plist ~/Library/LaunchAgents<br>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.php56.plist</p></blockquote><p>以上要选择自己对应的路径地址。</p><p>安装 composer（打开 Terminal 终端，输入）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/local/bin/composer  </span><br><span class="line">#改为国内源  </span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></p><h3 id="2-3-Nginx"><a href="#2-3-Nginx" class="headerlink" title="2.3 Nginx"></a>2.3 Nginx</h3><p>安装 Nginx 方法（打开 Terminal 终端，输入）：</p><blockquote><p>brew install nginx</p></blockquote><p>Nginx的安装包相对较大，在这个步骤需要等待一段时间，下载失败后可多次尝试安装，Brew每次会自动寻找合适的下载源</p><p>启动 Nginx 方法（打开 Terminal 终端，输入）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#测试nginx配置是否有语法错误  </span><br><span class="line">nginx -t</span><br><span class="line">#打开 nginx</span><br><span class="line">sudo nginx</span><br><span class="line">#重新加载配置|重启|停止|退出 nginx</span><br><span class="line">nginx -s reload|reopen|stop|quit</span><br><span class="line">#也可以使用Mac的launchctl来启动|停止 nginx</span><br><span class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span><br><span class="line">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure></p><p>设置 Nginx 开机启动方法（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure><p>设置 Nginx 监听端口权限（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root:wheel /usr/local/Cellar/nginx/1.12.1/bin/nginx</span><br><span class="line">sudo chmod u+s /usr/local/Cellar/nginx/1.12.1/bin/nginx</span><br></pre></td></tr></table></figure><p>这个自己根据版本号来哈</p><p>配置Nginx.conf（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#配置需要用到的目录</span><br><span class="line">mkdir -p /usr/local/var/logs/nginx</span><br><span class="line">mkdir -p /usr/local/etc/nginx/sites-available</span><br><span class="line">mkdir -p /usr/local/etc/nginx/sites-enabled</span><br><span class="line">mkdir -p /usr/local/etc/nginx/conf.d</span><br><span class="line">mkdir -p /usr/local/etc/nginx/ssl</span><br><span class="line">sudo mkdir -p /var/www</span><br><span class="line">sudo chown :staff /var/www</span><br><span class="line">sudo chmod 775 /var/www</span><br><span class="line">#使用 vim 编辑器编辑 nginx.conf</span><br><span class="line">vim /usr/local/etc/nginx/nginx.conf</span><br><span class="line">#nginx.conf 文件中此段内容部分，输入或修改为以下内容</span><br><span class="line">pid        /usr/local/var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  256;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /usr/local/var/logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    port_in_redirect off;</span><br><span class="line"></span><br><span class="line">    include /usr/local/etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vim 编辑器的退出并保存：按 ECS =&gt; 按 CAPS LOCK（大写键） =&gt; 按两下 Z</p><p>配置php-fpm 配置文件（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#使用 vim 编辑器编辑 php-fpm 配置</span><br><span class="line">vim /usr/local/etc/nginx/conf.d/php-fpm</span><br><span class="line">#写入以下内容</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    try_files                   $uri = 404;</span><br><span class="line">    fastcgi_pass                127.0.0.1:9000;</span><br><span class="line">    fastcgi_index               index.php;</span><br><span class="line">    fastcgi_intercept_errors    on;</span><br><span class="line">    include /usr/local/etc/nginx/fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx 虚拟机配置（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#创建 info.php index.html 404.html 403.html文件到 /var/www 下面</span><br><span class="line">vi /var/www/info.php</span><br><span class="line">//输入：&lt;?php phpinfo() ?&gt;</span><br><span class="line">vi /var/www/index.html</span><br><span class="line">//输入：&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Default Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=&quot;center&quot;&gt;Default&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">vi /var/www/403.html</span><br><span class="line">//输入：&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;403 Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=&quot;center&quot;&gt;Default&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">vi /var/www/404.html</span><br><span class="line">//输入：&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;404 Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 align=&quot;center&quot;&gt;Default&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">配置虚拟主机配置文件（打开 Terminal 终端，输入）：</span><br><span class="line"></span><br><span class="line">#使用 vim 编辑器编辑虚拟主机配置</span><br><span class="line">vim /usr/local/etc/nginx/sites-available/default</span><br><span class="line">#输入以下内容</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root         /var/www/;</span><br><span class="line"></span><br><span class="line">    access_log  /usr/local/var/logs/nginx/default.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line">        autoindex   on;</span><br><span class="line">        include     /usr/local/etc/nginx/conf.d/php-fpm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /info &#123;</span><br><span class="line">        allow   127.0.0.1;</span><br><span class="line">        deny    all;</span><br><span class="line">        rewrite (.*) /.info.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  404     /404.html;</span><br><span class="line">    error_page  403     /403.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置SSL虚拟主机配置文件（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#使用 vim 编辑器编辑SSL虚拟主机配置</span><br><span class="line">vim /usr/local/etc/nginx/sites-available/default-ssl</span><br><span class="line">#输入以下内容</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root       /var/www/;</span><br><span class="line"></span><br><span class="line">    access_log  /usr/local/var/logs/nginx/default-ssl.access.log  main;</span><br><span class="line"></span><br><span class="line">    ssl                  on;</span><br><span class="line">    ssl_certificate      ssl/localhost.crt;</span><br><span class="line">    ssl_certificate_key  ssl/localhost.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers   on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include   /usr/local/etc/nginx/conf.d/php-fpm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /info &#123;</span><br><span class="line">        allow   127.0.0.1;</span><br><span class="line">        deny    all;</span><br><span class="line">        rewrite (.*) /.info.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  404     /404.html;</span><br><span class="line">    error_page  403     /403.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置phpmyadmin虚拟主机配置文件（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#使用 vim 编辑器编辑phpmyadmin虚拟主机配置</span><br><span class="line">vim /usr/local/etc/nginx/sites-available/phpmyadmin</span><br><span class="line">#输入以下内容</span><br><span class="line">server &#123;</span><br><span class="line">    listen       306;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root    /usr/local/share/phpmyadmin;</span><br><span class="line"></span><br><span class="line">    error_log   /usr/local/var/logs/nginx/phpmyadmin.error.log;</span><br><span class="line">    access_log  /usr/local/var/logs/nginx/phpmyadmin.access.log main;</span><br><span class="line"></span><br><span class="line">    ssl                  on;</span><br><span class="line">    ssl_certificate      ssl/phpmyadmin.crt;</span><br><span class="line">    ssl_certificate_key  ssl/phpmyadmin.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers   on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line">        include   /usr/local/etc/nginx/conf.d/php-fpm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 phpmyadmin 默认设置为306端口，且开启 ssl</p><p>配置 SSL（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/etc/nginx/ssl</span><br><span class="line">openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj &quot;/C=US/ST=State/L=Town/O=Office/CN=localhost&quot; -keyout /usr/local/etc/nginx/ssl/localhost.key -out /usr/local/etc/nginx/ssl/localhost.crt</span><br><span class="line">openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj &quot;/C=US/ST=State/L=Town/O=Office/CN=phpmyadmin&quot; -keyout /usr/local/etc/nginx/ssl/phpmyadmin.key -out /usr/local/etc/nginx/ssl/phpmyadmin.crt</span><br></pre></td></tr></table></figure><p>创建虚拟主机软连接并开启（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -sfv /usr/local/etc/nginx/sites-available/default /usr/local/etc/nginx/sites-enabled/default</span><br><span class="line">ln -sfv /usr/local/etc/nginx/sites-available/default-ssl /usr/local/etc/nginx/sites-enabled/default-ssl</span><br><span class="line">ln -sfv /usr/local/etc/nginx/sites-available/phpmyadmin /usr/local/etc/nginx/sites-enabled/phpmyadmin</span><br></pre></td></tr></table></figure><p>重新装载 nginx（打开 Terminal 终端，输入）：</p><blockquote><p>sudo nginx -s reload</p></blockquote><p>可能会要求输入密码</p><p>测试 nginx 开启情况（打开浏览器，地址栏输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://localhost</span><br><span class="line">http://localhost/info.php</span><br><span class="line">http://localhost/404.html</span><br><span class="line">https://localhost/index.html(SSL)</span><br><span class="line">https://localhost/info.php(SSL)</span><br><span class="line">https://localhost/404.html(SSL)</span><br><span class="line">https://localhost:306(SSL)</span><br></pre></td></tr></table></figure><h3 id="2-4-Redis"><a href="#2-4-Redis" class="headerlink" title="2.4 Redis"></a>2.4 Redis</h3><p>安装方法（打开 Terminal 终端，输入）：</p><blockquote><p>brew install redis</p></blockquote><p><em>人在天朝的话，极有可能出现安装速度过于缓慢的情况，有时候会让你感觉安装处于假死的状态，不必担心，耐心等待即可，切不可心烦意乱的关闭终端窗口（网上有其他教程说可以切换 brew 的源到中科大 CDN，本人亲测：中科大 CDN 虽然快很多，但是clone 下来的文件和原本源存在一定差异，更新不及时。个人建议还是耐心等待，使用原本的源）</em></p><p>开启 Redis方法（打开 Terminal 终端，输入）：</p><blockquote><p>redis-server</p></blockquote><p>之后进入了管理模式，如果看到Ready to accept connections，说明安装运行成功，直接关闭终端再打开即可</p><p>安装 Php-Redis方法（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://pecl.php.net/get/redis-3.1.3.tgz </span><br><span class="line">tar -zxvf redis-3.1.3.tgz</span><br><span class="line">cd redis-3.1.3 </span><br><span class="line">phpize </span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>修改 php.ini方法（打开 Terminal 终端，输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#使用 vim 编辑器编辑 php.ini</span><br><span class="line">vi /usr/local/etc/php/7.2/php.ini</span><br><span class="line">//在文件最后加入extension=redis.so</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#重启 php-fpm </span><br><span class="line">sudo killall php-fpm &amp;&amp; sudo php-fpm -D </span><br><span class="line">#查看是否安装成功 </span><br><span class="line">php -m | grep redis</span><br></pre></td></tr></table></figure><p>以上。</p><p>补充：在我的这个markdown下，缩进没有代码块，要使用 三个反引号 才行。 好吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建PHP环境&quot;&gt;&lt;a href=&quot;#搭建PHP环境&quot; class=&quot;headerlink&quot; title=&quot;搭建PHP环境&quot;&gt;&lt;/a&gt;搭建PHP环境&lt;/h1&gt;&lt;p&gt;电脑买了也有一段时间了，买回来没多久我就搭了环境，&lt;br&gt;参照的是这篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="mac" scheme="https://lyubingo.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>安装cleanmymac3破解版</title>
    <link href="https://lyubingo.github.io/2018/06/08/2%E5%AE%89%E8%A3%85%E7%A0%B4%E8%A7%A3%E7%89%88cleanmymac3/"/>
    <id>https://lyubingo.github.io/2018/06/08/2安装破解版cleanmymac3/</id>
    <published>2018-06-08T07:31:54.000Z</published>
    <updated>2018-06-11T02:10:09.061Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第二篇博文了，很高兴。</p><p>我安装了破解版的cleanmymac3，记录一下。</p><p>好了，开始！</p><h1 id="cleanmymac3破解版"><a href="#cleanmymac3破解版" class="headerlink" title="cleanmymac3破解版"></a>cleanmymac3破解版</h1><p>cleanmymac这款软件很好用，可惜要收费啊，没办法，开始寻找破解版。</p><p><code>不要在拥有正版的前提下下载破解版然后移动至启动台时选择“保留两者”，并不会出现两个cleanmymac，而是直接损坏。。</code></p><p>反正我以后都会尽量避免“保留两者”</p><p>下载破解版，然后“替换”，我的就可以使用啦。</p><p>下载链接，这是我参照的原文链接<a href="https://seakee.top/other/cleanmymac-3-9-2-high-sierra.html" target="_blank" rel="noopener">https://seakee.top/other/cleanmymac-3-9-2-high-sierra.html</a></p><p>版本号是3.9.4，支持macOS 10.13 High Sierra，如果你的经济实力允许，还请购买<a href="https://macpaw.com/zh/store/cleanmymac?cs=c" target="_blank" rel="noopener">正版</a></p><p>我们知道，如果装非来自appstore的软件，会提示是否坚持打开，这是系统的一种安全机制保护，但其实，提示文件已损坏也是安全机制的一种保护，如果收到该提示，可以这样做，在命令下输入：</p><blockquote><p>sudo spctl –master-disable</p></blockquote><p>然后在设置偏好里就可以选择“任何来源”了，选择它，然后就可以打开了。</p><p>CleanMyMac 3.9.4 By TNT  </p><blockquote><p>解压密码 seakee.top</p></blockquote><p>百度云下载链接：</p><blockquote><p><a href="https://pan.baidu.com/s/1p2ZrT2E-DIdyYCQ5kuZy-g" target="_blank" rel="noopener">https://pan.baidu.com/s/1p2ZrT2E-DIdyYCQ5kuZy-g</a> 密码: 3jky</p></blockquote><p>ok！</p><p>如果没有了可以私信我，我这里保留着一份。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我的第二篇博文了，很高兴。&lt;/p&gt;
&lt;p&gt;我安装了破解版的cleanmymac3，记录一下。&lt;/p&gt;
&lt;p&gt;好了，开始！&lt;/p&gt;
&lt;h1 id=&quot;cleanmymac3破解版&quot;&gt;&lt;a href=&quot;#cleanmymac3破解版&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="mac" scheme="https://lyubingo.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>我是如何搭建这个博客的</title>
    <link href="https://lyubingo.github.io/2018/06/05/1%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%9A%84/"/>
    <id>https://lyubingo.github.io/2018/06/05/1我是如何搭建这个博客的/</id>
    <published>2018-06-05T07:13:37.000Z</published>
    <updated>2018-06-06T01:44:34.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初心"><a href="#初心" class="headerlink" title="初心"></a>初心</h1><p>一直想拥有一个属于自己网页博客，这样就可以肆无忌惮的写文章了。  </p><p>并且，在网页都能够找得到，多好啊，</p><p>所以，我就瞎写吧。</p><p>开始！</p><h1 id="物色"><a href="#物色" class="headerlink" title="物色"></a>物色</h1><p>首先在网上物色模版，看到了网站<a href="https://mrdear.cn" target="_blank" rel="noopener">mrdear.cn</a>，很是喜欢，研究后发现是基于<a href="http://hexo.io" target="_blank" rel="noopener">hexo</a>的<a href="http://github.com/Mrminfive/hexo-theme-skapp" target="_blank" rel="noopener">skapp主题</a>，然后我也想要。</p><p>hexo是基于node的，我之前没弄过，但是我不放弃尝试，根据教程一步步走就好。google了多篇文章，然后大意通读一遍，了解大致梗概。</p><p>发现： 如果照着一篇文章直接去弄， 不一定可以弄好， 根据自己的理解把它们整合了一下，最终搭建了此博客。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="下载node"><a href="#下载node" class="headerlink" title="下载node"></a>下载node</h3><p>mac下使用brew下载node：<br>首先可以手动更新一下：</p><blockquote><p>brew update</p></blockquote><p>由于改模板使用到了lunr，可能不支持高版本的node，因此使用nvm下载其推荐版本的node，我下载的是， LTS 8.9.3，正是其推荐版本</p><p>下载nvm   </p><blockquote><p>brew install nvm</p></blockquote><p>进入自己目录，修改.bash_profile</p><blockquote><p>cd ~<br>vim .bash_profile</p></blockquote><p>添加这两行：</p><blockquote><p>export NVM_DIR=~/.nvm<br>source $(brew –prefix nvm)/nvm.sh</p></blockquote><p>这两行应该是添加到环境变量的意思，就是不论在哪个目录都可以使用nvm命令都意思</p><p>修改完之后还需要更新一下：</p><blockquote><p>source .bash_profile</p></blockquote><p>然后使用nvm查看所有的node对应的版本库</p><blockquote><p>nvm ls-remote</p></blockquote><p>在列表选择自己想要下载的对应版本，这里下载8.9.3LTS版本：</p><blockquote><p>nvm install v8.9.3</p></blockquote><p>使用这个版本，默认使用该版本：</p><blockquote><p>nvm use v8.9.3<br>nvm alias default v8.9.3</p></blockquote><p>一般装了node都会装上npm，查看node和npm版本</p><blockquote><p>node -v<br>npm -v</p></blockquote><h3 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a>下载hexo</h3><p>使用npm全局下载博客，hexo：</p><blockquote><p>npm install -g hexo</p></blockquote><p>然后我进到了自己的用户目录，即～，创建了blog文件夹，然后进入文件夹创建了github文件夹，最后进入github文件，创建了最终的文件夹，名为yourUserName.github.io，此处的<code>yourUserName</code>指的是你的github用户名，因为hexo可以免费部署在github上，同名比较好管理，比如我的叫做<code>lyubingo.github.io</code>，然后在此文件夹里初始化hexo：</p><blockquote><p>hexo init</p></blockquote><p>查看<code>ls</code>当前目录，可以多出了好多文件，其中，<code>_config.yml</code>是关键的配置文件，里面对应的项网上都可以查到。</p><p>接下来下载自己喜欢的主题，我使用的是skapp主题，命令如下：</p><blockquote><p>cd themes &amp;&amp; git clone <a href="https://github.com/Mrminfive/hexo-theme-skapp.git" target="_blank" rel="noopener">https://github.com/Mrminfive/hexo-theme-skapp.git</a></p></blockquote><p>当然，在此之前你必须有git，git我就不多说了，另外要注意的是，进到theme之后再进行克隆。</p><p>然后，进入该主题的github页，作者会告诉你如何配置和使用他的作品，这里贴一下地址，照着做就可以。</p><p>我的主题网址：<a href="https://github.com/lyubingo/hexo-theme-skapp/blob/master/README-cn.md" target="_blank" rel="noopener">链接</a></p><p>按照他的配置配置好，装好他的依赖，然后在本地调试通过即可，上面都有写，我就不啰嗦了。</p><h3 id="同步github"><a href="#同步github" class="headerlink" title="同步github"></a>同步github</h3><p>按照作者的意思弄完之后，本地可以访问了，但是线上没有，所以这步是同步到github。</p><p>github上注册一个账号，然后创建一个仓库，即responsetiy，把库的名字取为yourUserName.github.io，然后该域名就属于你啦。</p><p>需要注意的有两点：  </p><blockquote><p>1.如果是qq.com好像不支持<br>2.库名为lyubingo.github.io而不是lyubingo..</p></blockquote><p>然后，就是把github和本地关联起来。</p><p>添加github的相关配置信息</p><blockquote><p>vim _config.yml  </p></blockquote><pre><code>deploy:        type: git      repo: https://github.com/lyubingo/lyubingo.github.io.git        branch: master</code></pre><p>然后关联起来：  </p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>好了，差不多了。<br>接下来使用</p><blockquote><p>hexo g 生成文件<br>hexo s 本地调试<br>hexo d 推送到github线上</p></blockquote><p>即可。</p><p>通常，可以使用</p><blockquote><p>hexo clean</p></blockquote><p>清理一下，然后生成文件，然后本地调试或者推送到github都可以。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>写文章：</p><p>这个其实hexo文档可以查到，不过我也说一下吧，使用命令<br><code>hexo new [layout] &lt;title&gt;</code></p><p>关于什么是layout，可以参考这篇：<a href="http://oakland.github.io/2016/05/02/hexo-%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E4%B8%80%E7%AF%87%E6%96%B0%E7%9A%84post/#textlogo" target="_blank" rel="noopener">链接</a></p><p>删除文章：<br>在本地删除source文件夹下_posts里面对应的md文件然后<code>hexo g, hexo d</code>push上去即可。</p><p>好啦，就这么多啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初心&quot;&gt;&lt;a href=&quot;#初心&quot; class=&quot;headerlink&quot; title=&quot;初心&quot;&gt;&lt;/a&gt;初心&lt;/h1&gt;&lt;p&gt;一直想拥有一个属于自己网页博客，这样就可以肆无忌惮的写文章了。  &lt;/p&gt;
&lt;p&gt;并且，在网页都能够找得到，多好啊，&lt;/p&gt;
&lt;p&gt;所以，我
      
    
    </summary>
    
    
      <category term="hexo github" scheme="https://lyubingo.github.io/tags/hexo-github/"/>
    
  </entry>
  
</feed>
